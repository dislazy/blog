{"title":"minio改造支持tencent-cos","slug":"minio改造支持tencent-cos","date":"2022-01-28T02:55:50.000Z","updated":"2022-06-02T01:05:59.616Z","comments":true,"path":"api/articles/minio改造支持tencent-cos.json","excerpt":"背景最近在调研一款能管理我的tencent-cos的在线管理端软件，然后调研了很多软件，之前试用过nextcloud发现一般，然后看中了minio，看评测说性能比较好，并且支持S3协议。在实际使用过程中是使用的docker部署，具体命令如下,对应文档可以点击minio-gateway：1<br>2<br>3<br>4<br>docker run -p 9000:9000 --name minio-s3 \\<br> -e &quot;MINIO_ACCESS_KEY=access_key&quot; \\<br> -e &quot;MINIO_SECRET_KEY=secret_key&quot; \\<br> minio/minio gateway s3  https://cos.ap-beijing.myqcloud.com<br>然而在我将信息填入以后，发现始终无法创建,提示：ERROR Unable to initialize gateway backend: Could not parse the specified URI.<br>然而通过中心搜索并不能寻找到结果，然后使用全英文搜索就找到问题所在了，原因是：tencent-cos的bucket命名是以: bucket名+个人的账号数字为命名方式的，和minio的默认创建桶的方式不一样，所以始终提示该错误。改造过程既然问题已经找到，剩下的问题就解决问题了，解决问题一般有两种方案，一般是解决创造问题的人，一种是直接解决，然而通过腾讯云的工单并不能解决问题，直接说是第三方的原因导致的，无法进行修改。<br>直接解决问题也很简单：先找到minio的github仓库，然后fork到自己的仓库中，按文件夹查找cmd-&gt;gateway-&gt;s3-&gt;gateway-s3.go文件然后找到randString这个方法修改最后的返回值为：return prefix + string(b[0:30-len(prefix)]) + &quot;-123&quot;。此时问题解决。","covers":null,"content":"<div class=\"story post-story\"><h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>最近在调研一款能管理我的tencent-cos的在线管理端软件，然后调研了很多软件，之前试用过nextcloud发现一般，然后看中了minio，看评测说性能比较好，并且支持S3协议。</p>\n<p>在实际使用过程中是使用的docker部署，具体命令如下,对应文档可以点击<a href=\"http://docs.minio.org.cn/docs/master/minio-gateway-for-s3\">minio-gateway</a>：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 9000:9000 --name minio-s3 \\</span><br><span class=\"line\"> -e &quot;MINIO_ACCESS_KEY=access_key&quot; \\</span><br><span class=\"line\"> -e &quot;MINIO_SECRET_KEY=secret_key&quot; \\</span><br><span class=\"line\"> minio/minio gateway s3  https://cos.ap-beijing.myqcloud.com</span><br></pre></td></tr></table></figure>\n<p>然而在我将信息填入以后，发现始终无法创建,提示：<code>ERROR Unable to initialize gateway backend: Could not parse the specified URI.</code><br>然而通过中心搜索并不能寻找到结果，然后使用全英文搜索就找到问题所在了，原因是：tencent-cos的bucket命名是以: <strong>bucket名+个人的账号数字</strong>为命名方式的，和minio的默认创建桶的方式不一样，所以始终提示该错误。</p>\n</div><div class=\"story post-story\"><h2 id=\"改造过程\"><a href=\"#改造过程\" class=\"headerlink\" title=\"改造过程\"></a>改造过程</h2><p>既然问题已经找到，剩下的问题就解决问题了，解决问题一般有两种方案，一般是解决创造问题的人，一种是直接解决，然而通过腾讯云的工单并不能解决问题，直接说是第三方的原因导致的，无法进行修改。<br>直接解决问题也很简单：</p>\n<ul>\n<li>先找到minio的github仓库，然后fork到自己的仓库中，</li>\n<li>按文件夹查找<strong>cmd-&gt;gateway-&gt;s3-&gt;gateway-s3.go</strong>文件</li>\n<li>然后找到<strong>randString</strong>这个方法</li>\n<li>修改最后的返回值为：<code>return prefix + string(b[0:30-len(prefix)]) + &quot;-123&quot;</code>。</li>\n<li>此时问题解决。</li>\n</ul>\n</div><div class=\"story post-story\"><h2 id=\"修改完代码如何投入使用\"><a href=\"#修改完代码如何投入使用\" class=\"headerlink\" title=\"修改完代码如何投入使用\"></a>修改完代码如何投入使用</h2><p>其实记录本篇文章的目的不仅仅是解决上面遇到的问题，更是记录一下实际在修改完代码后如何投入使用，最简单的方法有两种：</p>\n<ul>\n<li>如果直接使用宿主机安装的，那么用带有go环境的电脑，直接进入仓库运行<code>make</code> 打包出可执行文件minio然后替换原来的直接执行</li>\n<li>如果使用docker安装的稍微有些麻烦,但是原理是替换容器中的可执行文件，然后再次执行，下面详细讲解一下</li>\n</ul>\n<h3 id=\"docker容器修改启动minio\"><a href=\"#docker容器修改启动minio\" class=\"headerlink\" title=\"docker容器修改启动minio\"></a>docker容器修改启动minio</h3><ul>\n<li>如果没有go环境先安装go环境，如果会github action的可以先用github action来进行打包和封装进镜像</li>\n<li>然后运行<code>make</code> 运行完后会打包出一个minio的可执行文件</li>\n<li>然后将官方镜像文件下载下来，先运行一下，再通过<code>docker cp minio minio:/opt/bin/</code></li>\n<li>将<strong>minio</strong> 这个容器中的可执行文件直接替换成新的，如果你的容器名不叫这个，可以更换成自己的名字或者容器ID</li>\n<li>不知道minio在容器中存放的位置，可以镜像仓库中的<strong>Dockerfile.release</strong>中找到，如：<code>curl -s -q https://dl.min.io/server/minio/release/linux-$&#123;TARGETARCH&#125;/archive/minio.$&#123;RELEASE&#125; -o /opt/bin/minio</code> 此时就找到了<code>/opt/bin/minio</code>的存放位置</li>\n</ul>\n</div><div class=\"story post-story\"><h2 id=\"改造结果\"><a href=\"#改造结果\" class=\"headerlink\" title=\"改造结果\"></a>改造结果</h2><p>注意：改造完成后，容器可以正常运行，此时可以将该容器打造成一个镜像，再上传到你的镜像仓库中，作为cos的专用版使用。</p>\n<p>此时整个过程都比较简单，就是需要安装go环境和利用docker容器的一些常用方法，进行对应的改造。</p>\n<p>就写到这了，有问题可以直接通过邮件联系我一起交流。</p>\n\n</div>","more":"<div class=\"story post-story\"><h2 id=\"修改完代码如何投入使用\"><a href=\"#修改完代码如何投入使用\" class=\"headerlink\" title=\"修改完代码如何投入使用\"></a>修改完代码如何投入使用</h2><p>其实记录本篇文章的目的不仅仅是解决上面遇到的问题，更是记录一下实际在修改完代码后如何投入使用，最简单的方法有两种：</p>\n<ul>\n<li>如果直接使用宿主机安装的，那么用带有go环境的电脑，直接进入仓库运行<code>make</code> 打包出可执行文件minio然后替换原来的直接执行</li>\n<li>如果使用docker安装的稍微有些麻烦,但是原理是替换容器中的可执行文件，然后再次执行，下面详细讲解一下</li>\n</ul>\n<h3 id=\"docker容器修改启动minio\"><a href=\"#docker容器修改启动minio\" class=\"headerlink\" title=\"docker容器修改启动minio\"></a>docker容器修改启动minio</h3><ul>\n<li>如果没有go环境先安装go环境，如果会github action的可以先用github action来进行打包和封装进镜像</li>\n<li>然后运行<code>make</code> 运行完后会打包出一个minio的可执行文件</li>\n<li>然后将官方镜像文件下载下来，先运行一下，再通过<code>docker cp minio minio:/opt/bin/</code></li>\n<li>将<strong>minio</strong> 这个容器中的可执行文件直接替换成新的，如果你的容器名不叫这个，可以更换成自己的名字或者容器ID</li>\n<li>不知道minio在容器中存放的位置，可以镜像仓库中的<strong>Dockerfile.release</strong>中找到，如：<code>curl -s -q https://dl.min.io/server/minio/release/linux-$&#123;TARGETARCH&#125;/archive/minio.$&#123;RELEASE&#125; -o /opt/bin/minio</code> 此时就找到了<code>/opt/bin/minio</code>的存放位置</li>\n</ul>\n</div><div class=\"story post-story\"><h2 id=\"改造结果\"><a href=\"#改造结果\" class=\"headerlink\" title=\"改造结果\"></a>改造结果</h2><p>注意：改造完成后，容器可以正常运行，此时可以将该容器打造成一个镜像，再上传到你的镜像仓库中，作为cos的专用版使用。</p>\n<p>此时整个过程都比较简单，就是需要安装go环境和利用docker容器的一些常用方法，进行对应的改造。</p>\n<p>就写到这了，有问题可以直接通过邮件联系我一起交流。</p>\n\n</div>","categories":[{"name":"minio","path":"api/categories/minio.json"}],"tags":[{"name":"Golang","path":"api/tags/Golang.json"},{"name":"docker","path":"api/tags/docker.json"},{"name":"minio","path":"api/tags/minio.json"}]}