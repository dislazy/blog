{"title":"说一说Java异常处理的心得体会","slug":"说一说Java异常处理的心得体会","date":"2018-10-14T09:20:53.000Z","updated":"2022-06-02T01:05:59.618Z","comments":true,"path":"api/articles/说一说Java异常处理的心得体会.json","excerpt":"1.切勿捕获异常不处理使用try-catch捕获异常后，无任何处理，这样的做法会吞噬异常，外层代码或调用方无法感知异常的发生。捕获异常后，打印错误日志，可以立即处理掉，也可以直接向外抛出或构建内部异常向外抛出，切勿无任务处理操作。","covers":null,"content":"<h4 id=\"1-切勿捕获异常不处理\"><a href=\"#1-切勿捕获异常不处理\" class=\"headerlink\" title=\"1.切勿捕获异常不处理\"></a>1.切勿捕获异常不处理</h4><p>使用try-catch捕获异常后，无任何处理，这样的做法会吞噬异常，外层代码或调用方无法感知异常的发生。捕获异常后，打印错误日志，可以立即处理掉，也可以直接向外抛出或构建内部异常向外抛出，切勿无任务处理操作。</p>\n<h4 id=\"2-不要catch中捕获Exception异常\"><a href=\"#2-不要catch中捕获Exception异常\" class=\"headerlink\" title=\"2.不要catch中捕获Exception异常\"></a>2.不要catch中捕获Exception异常</h4><p>Exception代表的是异常的大类，而代码中通常需要捕获的是某某特定异常，进而进行特定的异常处理；而且，从写代码的角度来说，捕获清晰明了的特定异常会提升代码的可读性。</p>\n<h4 id=\"3-切勿使用e-printStackTrace\"><a href=\"#3-切勿使用e-printStackTrace\" class=\"headerlink\" title=\"3.切勿使用e.printStackTrace()\"></a>3.切勿使用e.printStackTrace()</h4><p>e.printStackTrace()方法打印出的信息不利于跟踪出错的具体轨迹，特别是对于一些复杂的系统，所以切勿使用。</p>\n<h4 id=\"4-减小try块的范围\"><a href=\"#4-减小try块的范围\" class=\"headerlink\" title=\"4.减小try块的范围\"></a>4.减小try块的范围</h4><p>try-catch会影响JVM对代码进行优化，所以尽量减少try块中的代码，只对有必要的代码进行try。</p>\n<h4 id=\"5-切勿在finally块中对返回值进行操作\"><a href=\"#5-切勿在finally块中对返回值进行操作\" class=\"headerlink\" title=\"5.切勿在finally块中对返回值进行操作\"></a>5.切勿在finally块中对返回值进行操作</h4><p>finally代码块一般用于收尾工作，例如释放资源、释放连接等，如果在这里有对返回值进行操作的处理，可能会被忽略。</p>\n<h4 id=\"6-有必要，才使用\"><a href=\"#6-有必要，才使用\" class=\"headerlink\" title=\"6.有必要，才使用\"></a>6.有必要，才使用</h4><p>每创建一个Exception实例，都会对栈信息进行快照，如果很频繁将会产生很大的开销。</p>\n\n","more":"\n<h4 id=\"2-不要catch中捕获Exception异常\"><a href=\"#2-不要catch中捕获Exception异常\" class=\"headerlink\" title=\"2.不要catch中捕获Exception异常\"></a>2.不要catch中捕获Exception异常</h4><p>Exception代表的是异常的大类，而代码中通常需要捕获的是某某特定异常，进而进行特定的异常处理；而且，从写代码的角度来说，捕获清晰明了的特定异常会提升代码的可读性。</p>\n<h4 id=\"3-切勿使用e-printStackTrace\"><a href=\"#3-切勿使用e-printStackTrace\" class=\"headerlink\" title=\"3.切勿使用e.printStackTrace()\"></a>3.切勿使用e.printStackTrace()</h4><p>e.printStackTrace()方法打印出的信息不利于跟踪出错的具体轨迹，特别是对于一些复杂的系统，所以切勿使用。</p>\n<h4 id=\"4-减小try块的范围\"><a href=\"#4-减小try块的范围\" class=\"headerlink\" title=\"4.减小try块的范围\"></a>4.减小try块的范围</h4><p>try-catch会影响JVM对代码进行优化，所以尽量减少try块中的代码，只对有必要的代码进行try。</p>\n<h4 id=\"5-切勿在finally块中对返回值进行操作\"><a href=\"#5-切勿在finally块中对返回值进行操作\" class=\"headerlink\" title=\"5.切勿在finally块中对返回值进行操作\"></a>5.切勿在finally块中对返回值进行操作</h4><p>finally代码块一般用于收尾工作，例如释放资源、释放连接等，如果在这里有对返回值进行操作的处理，可能会被忽略。</p>\n<h4 id=\"6-有必要，才使用\"><a href=\"#6-有必要，才使用\" class=\"headerlink\" title=\"6.有必要，才使用\"></a>6.有必要，才使用</h4><p>每创建一个Exception实例，都会对栈信息进行快照，如果很频繁将会产生很大的开销。</p>\n\n","categories":[{"name":"Java","path":"api/categories/Java.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}