{"title":"MYSQL千万级数据量的优化方法积累","slug":"Mysql千万级数据量的优化方法积累","date":"2018-10-14T09:10:26.000Z","updated":"2022-06-02T01:05:59.614Z","comments":true,"path":"api/articles/Mysql千万级数据量的优化方法积累.json","excerpt":"1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：select id from t where num is null可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：select id from t where num&#x3D;0","covers":null,"content":"<p>1.对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>\n<p>2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：select id from t where num is null可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：select id from t where num&#x3D;0</p>\n<p>3.应尽量避免在 where 子句中使用!&#x3D;或&lt;&gt;操作符，否则引擎将放弃使用索引而进行全表扫描。</p>\n<p>4.应尽量避免在 where 子句中使用or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：select id from t where num&#x3D;10 or num&#x3D;20可以这样查询：select id from t where num&#x3D;10 union all select id from t where num&#x3D;20</p>\n<p>5.in 和 not in 也要慎用，否则会导致全表扫描，如：select id from t where num in(1,2,3) 对于连续的数值，能用 between 就不要用 in 了：select id from t where num between 1 and 3</p>\n<p>6.下面的查询也将导致全表扫描：select id from t where name like ‘%李%’若要提高效率，可以考虑全文检索。</p>\n<p>如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：select id from t where num&#x3D;@num可以改为强制查询使用索引：select id from t with(index(索引名)) where num&#x3D;@num<br>8.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：select id from t where num&#x2F;2&#x3D;100应改为:select id from t where num&#x3D;100*2</p>\n<p>9.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：select id from t where substring(name,1,3)&#x3D;’abc’ ，name以abc开头的id应改为:</p>\n<p>select id from t where name like ‘abc%’</p>\n<p>10.不要在 where 子句中的“&#x3D;”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n<p>11.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n<p>12.不要写一些没有意义的查询，如需要生成一个空表结构：<code>select col1,col2 into #t from t where 1=0</code></p>\n<p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：</p>\n<p><code>create table #t(…)</code></p>\n<p>13.很多时候用 exists 代替 in 是一个好的选择：<code>select num from a where num in(select num from b)</code></p>\n<p>用下面的语句替换：</p>\n<p><code>select num from a where exists(select 1 from b where num=a.num)</code></p>\n<p>14.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n<p>索引并不是越多越好，索引固然可 以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。<br>应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。<br>17.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了.</p>\n<p>18.尽可能的使用 varchar&#x2F;nvarchar 代替 char&#x2F;nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n<p>19.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>\n<p>20.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p>\n<p>21.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n<p>22.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>\n<p>23.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n<p>24.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n<p>25.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n<p>26.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n<p>与临时表一样，游标并不是不可使 用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。<br>28.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送DONE_IN_PROC 消息。</p>\n<p>29.尽量避免大事务操作，提高系统并发能力.</p>\n<p>30.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<p>1、分库分表</p>\n<p>很明显，一个主表（也就是很重要的表，例如用户表）无限制的增长势必严重影响性能，分库与分表是一个很不错的解决途径，也就是性能优化途径，现在的案例是我们有一个1000多万条记录的用户表members,查询起来非常之慢，同事的做法是将其散列到100个表中，分别从members0到members99，然后根据mid分发记录到这些表中，牛逼的代码大概是这样子：</p>\n<?php\n\nfor($i=0;$i< 100; $i++ ){\n\n//echo \"CREATE TABLE db2.members{$i} LIKE db1.members<br>\";\n\necho \"INSERT INTO members{$i} SELECT * FROM members WHERE mid0={$i}<br>\";\n\n}\n\n?>\n\n<p>2、不停机修改mysql表结构</p>\n<p>同样还是members表，前期设计的表结构不尽合理，随着数据库不断运行，其冗余数据也是增长巨大，同事使用了下面的方法来处理：</p>\n<p>先创建一个临时表：</p>\n<p>CREATE TABLE members_tmp LIKE members</p>\n<p>然后修改members_tmp的表结构为新结构，接着使用上面那个for循环来导出数据，因为1000万的数据一次性导出是不对的，mid是主键，一个区间一个区间的导，基本是一次导出5万条吧，这里略去了</p>\n<p>接着重命名将新表替换上去：</p>\n<p><code>RENAME TABLE members TO members_bak,members_tmp TO members;</code></p>\n<p>就是这样，基本可以做到无损失，无需停机更新表结构，但实际上RENAME期间表是被锁死的，所以选择在线少的时候操作是一个技巧。经过这个操作，使得原先8G多的表，一下子变成了2G多</p>\n<p>另外还讲到了mysql中float字段类型的时候出现的诡异现象，就是在pma中看到的数字根本不能作为条件来查询</p>\n<p>3、常用SQL语句优化：</p>\n<p>数据库(表)设计合理</p>\n<p>我们的表设计要符合3NF 3范式(规范的模式) , 有时我们需要适当的逆范式</p>\n<p>sql语句的优化(索引，常用小技巧.)</p>\n<p>数据的配置(缓存设大)</p>\n<p>适当硬件配置和操作系统 (读写分离.)</p>\n<p>数据的3NF</p>\n<p>1NF :就是具有原子性，不可分割.(只要使用的是关系性数据库，就自动符合)</p>\n<p>2NF: 在满足1NF 的基础上，我们考虑是否满足2NF: 只要表的记录满足唯一性,也是说,你的同一张表，不可能出现完全相同的记录, 一般说我们在 表中设计一个主键即可.</p>\n<p>3NF: 在满足2NF 的基础上，我们考虑是否满足3NF：即我们的字段信息可以通过关联的关系，派生即可.(通常我们通过外键来处理)</p>\n<p>逆范式: 为什么需呀逆范式:</p>\n<p>(相册的功能对应数据库的设计)</p>\n<p>适当的逆范式.</p>\n<p>sql语句的优化</p>\n<p>sql语句有几类</p>\n<p>ddl (数据定义语言) [create alter drop]</p>\n<p>dml(数据操作语言)[insert delete upate ]</p>\n<p>select</p>\n<p>dtl(数据事务语句) [commit rollback savepoint]</p>\n<p>dcl(数据控制语句) [grant revoke]</p>\n<p>show status命令</p>\n<p>该命令可以显示你的mysql数据库的当前状态.我们主要关心的是 “com”开头的指令</p>\n<p>show status like ‘Com%’ &lt;&#x3D;&gt; show session status like ‘Com%’ &#x2F;&#x2F;显示当前控制台的情况</p>\n<p>show global status like ‘Com%’ ; &#x2F;&#x2F;显示数据库从启动到 查询的次数</p>\n<p>显示连接数据库次数</p>\n<p>show status like ‘Connections’;</p>\n<p>这里我们优化的重点是在 慢查询. (在默认情况下是10 ) mysql5.5.19</p>\n<p>显示查看慢查询的情况</p>\n<p>show variables like ‘long_query_time’</p>\n<p>为了教学，我们搞一个海量表(mysql存储过程)</p>\n<p>目的，就是看看怎样处理，在海量表中，查询的速度很快!</p>\n<p>select * from emp where empno&#x3D;123456;</p>\n<p>需求：如何在一个项目中，找到慢查询的select , mysql数据库支持把慢查询语句，记录到日志中，程序员分析. (但是注意，默认情况下不启动.)</p>\n<p>步骤:</p>\n<p>要这样启动mysql</p>\n<p>进入到 mysql安装目录</p>\n<p>启动 xx&gt;binmysqld.exe –slow-query-log 这点注意<br>测试 ,比如我们把</p>\n<p>select * from emp where empno&#x3D;34678 ；</p>\n<p>用了1.5秒，我现在优化.</p>\n<p>快速体验: 在emp表的 empno建立索引.</p>\n<p>alter table emp add primary key(empno);</p>\n<p>&#x2F;&#x2F;删除主键索引</p>\n<p>alter table emp drop primary key</p>\n<p>然后，再查速度变快.</p>\n<p>l 索引的原理</p>\n<p>介绍一款非常重要工具explain, 这个分析工具可以对 sql语句进行分析,可以预测你的sql执行的效率.</p>\n<p>他的基本用法是:</p>\n<p>explain sql语句G</p>\n<p>&#x2F;&#x2F;根据返回的信息，我们可知,该sql语句是否使用索引，从多少记录中取出,可以看到排序的方式.</p>\n<p>l 在什么列上添加索引比较合适</p>\n<p>① 在经常查询的列上加索引.</p>\n<p>② 列的数据，内容就只有少数几个值,不太适合加索引.</p>\n<p>③ 内容频繁变化，不合适加索引</p>\n<p>l 索引的种类</p>\n<p>① 主键索引 (把某列设为主键，则就是主键索引)</p>\n<p>② 唯一索引(unique) （即该列具有唯一性，同时又是索引）</p>\n<p>③ index （普通索引）</p>\n<p>④ 全文索引(FULLTEXT)</p>\n<p><code>select * from article where content like ‘%李连杰%’;</code></p>\n<p>hello, i am a boy</p>\n<p>l 你好，我是一个男孩 &#x3D;&gt;中文 sphinx</p>\n<p>⑤ 复合索引(多列和在一起)</p>\n<p><code>create index myind on 表名 (列1,列2);</code></p>\n<p>l 如何创建索引</p>\n<p>如果创建unique &#x2F; 普通&#x2F;fulltext 索引</p>\n<p><code>create [unique|FULLTEXT] index 索引名 on 表名 (列名…)</code><br><code>alter table 表名 add index 索引名 (列名…)</code><br>&#x2F;&#x2F;如果要添加主键索引</p>\n<p><code>alter table 表名 add primary key (列…)</code></p>\n<p>删除索引</p>\n<p><code>drop index 索引名 on 表名</code></p>\n<p><code>alter table 表名 drop index index_name;</code></p>\n<p><code>alter table 表名 drop primary key</code></p>\n<p>显示索引</p>\n<p><code>show index(es) from 表名</code></p>\n<p><code>show keys from 表名</code></p>\n<p><code>desc 表名</code></p>\n<p>如何查询某表的索引</p>\n<p><code>show indexes from 表名</code></p>\n<p>l 使用索引的注意事项</p>\n<p>查询要使用索引最重要的条件是查询条件中需要使用索引。</p>\n<p>下列几种情况下有可能使用到索引：</p>\n<p>1，对于创建的多列索引，只要查询条件使用了最左边的列，索引一般就会被使用。</p>\n<p>2，对于使用like的查询，查询如果是 ‘�a’ 不会使用到索引 aaa%’ 会使用到索引。</p>\n<p>下列的表将不使用索引：</p>\n<p>1，如果条件中有or，即使其中有条件带索引也不会使用。</p>\n<p>2，对于多列索引，不是使用的第一部分，则不会使用索引。</p>\n<p>3，like查询是以%开头</p>\n<p>4，如果列类型是字符串，那一定要在条件中将数据使用引号引用起来。否则不使用索引。</p>\n<p>5，如果mysql估计使用全表扫描要比使用索引快，则不使用索引。</p>\n<p>l 如何检测你的索引是否有效</p>\n<p>结论: Handler_read_key 越大越少</p>\n<p>Handler_read_rnd_next 越小越好</p>\n<p>fdisk</p>\n<p>find</p>\n<p>l MyISAM 和 Innodb区别是什么</p>\n<p>MyISAM 不支持外键, Innodb支持</p>\n<p>MyISAM 不支持事务,不支持外键.</p>\n<p>对数据信息的存储处理方式不同.（如果存储引擎是MyISAM的，则创建一张表，对于三个文件..,如果是Innodb则只有一张文件 *.frm,数据存放到ibdata1）</p>\n<p>对于 MyISAM 数据库，需要定时清理</p>\n<p>optimize table 表名</p>\n<p>l 常见的sql优化手法</p>\n<p>使用order by null 禁用排序</p>\n<p>比如<code> select A/B/C from dept group by ename order by null</code></p>\n<p>在精度要求高的应用中，建议使用定点数(decimal)来存储数值，以保证结果的准确性</p>\n<ol start=\"3\">\n<li>如果字段是字符类型的索引，用作条件查询时一定要加单引号，不然索引无效。</li>\n</ol>\n<p>主键索引如果没用到，再查询for update这种情况，会造成表锁定。容易造成卡死。<br>1000000.32 万</p>\n<p><code>create table sal(t1 float(10,2));</code></p>\n<p><code>create table sal2(t1 decimal(10,2));</code></p>\n<p>问?在php中 ,int 如果是一个有符号数，最大值. int- 4*8&#x3D;32 2 31 -1</p>\n<p>l 表的水平划分</p>\n<p>l 垂直分割表</p>\n<p>如果你的数据库的存储引擎是MyISAM的，则当创建一个表，后三个文件. .frm 记录表结构. .myd 数据 *.myi 这个是索引.</p>\n<p>mysql5.5.19的版本，数据库文件，默认放在 （看 my.ini文件中的配置.）</p>\n<p>转自<a href=\"https://www.toutiao.com/i6583260372269007374/?tt_from=mobile_qq&amp;utm_campaign=client_share&amp;timestamp=1533830508&amp;app=news_article&amp;utm_source=mobile_qq&amp;iid=39018175817&amp;utm_medium=toutiao_ios&amp;group_id=6583260372269007374\">https://www.toutiao.com/i6583260372269007374/?tt_from=mobile_qq&amp;utm_campaign=client_share&amp;timestamp=1533830508&amp;app=news_article&amp;utm_source=mobile_qq&amp;iid=39018175817&amp;utm_medium=toutiao_ios&amp;group_id=6583260372269007374</a></p>\n\n","more":"\n<p>3.应尽量避免在 where 子句中使用!&#x3D;或&lt;&gt;操作符，否则引擎将放弃使用索引而进行全表扫描。</p>\n<p>4.应尽量避免在 where 子句中使用or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：select id from t where num&#x3D;10 or num&#x3D;20可以这样查询：select id from t where num&#x3D;10 union all select id from t where num&#x3D;20</p>\n<p>5.in 和 not in 也要慎用，否则会导致全表扫描，如：select id from t where num in(1,2,3) 对于连续的数值，能用 between 就不要用 in 了：select id from t where num between 1 and 3</p>\n<p>6.下面的查询也将导致全表扫描：select id from t where name like ‘%李%’若要提高效率，可以考虑全文检索。</p>\n<p>如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：select id from t where num&#x3D;@num可以改为强制查询使用索引：select id from t with(index(索引名)) where num&#x3D;@num<br>8.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：select id from t where num&#x2F;2&#x3D;100应改为:select id from t where num&#x3D;100*2</p>\n<p>9.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：select id from t where substring(name,1,3)&#x3D;’abc’ ，name以abc开头的id应改为:</p>\n<p>select id from t where name like ‘abc%’</p>\n<p>10.不要在 where 子句中的“&#x3D;”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>\n<p>11.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>\n<p>12.不要写一些没有意义的查询，如需要生成一个空表结构：<code>select col1,col2 into #t from t where 1=0</code></p>\n<p>这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：</p>\n<p><code>create table #t(…)</code></p>\n<p>13.很多时候用 exists 代替 in 是一个好的选择：<code>select num from a where num in(select num from b)</code></p>\n<p>用下面的语句替换：</p>\n<p><code>select num from a where exists(select 1 from b where num=a.num)</code></p>\n<p>14.并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>\n<p>索引并不是越多越好，索引固然可 以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。<br>应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。<br>17.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了.</p>\n<p>18.尽可能的使用 varchar&#x2F;nvarchar 代替 char&#x2F;nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>\n<p>19.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>\n<p>20.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</p>\n<p>21.避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>\n<p>22.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>\n<p>23.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>\n<p>24.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>\n<p>25.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>\n<p>26.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>\n<p>与临时表一样，游标并不是不可使 用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。<br>28.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF 。无需在执行存储过程和触发器的每个语句后向客户端发送DONE_IN_PROC 消息。</p>\n<p>29.尽量避免大事务操作，提高系统并发能力.</p>\n<p>30.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>\n<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>\n<p>1、分库分表</p>\n<p>很明显，一个主表（也就是很重要的表，例如用户表）无限制的增长势必严重影响性能，分库与分表是一个很不错的解决途径，也就是性能优化途径，现在的案例是我们有一个1000多万条记录的用户表members,查询起来非常之慢，同事的做法是将其散列到100个表中，分别从members0到members99，然后根据mid分发记录到这些表中，牛逼的代码大概是这样子：</p>\n<?php\n\nfor($i=0;$i< 100; $i++ ){\n\n//echo \"CREATE TABLE db2.members{$i} LIKE db1.members<br>\";\n\necho \"INSERT INTO members{$i} SELECT * FROM members WHERE mid0={$i}<br>\";\n\n}\n\n?>\n\n<p>2、不停机修改mysql表结构</p>\n<p>同样还是members表，前期设计的表结构不尽合理，随着数据库不断运行，其冗余数据也是增长巨大，同事使用了下面的方法来处理：</p>\n<p>先创建一个临时表：</p>\n<p>CREATE TABLE members_tmp LIKE members</p>\n<p>然后修改members_tmp的表结构为新结构，接着使用上面那个for循环来导出数据，因为1000万的数据一次性导出是不对的，mid是主键，一个区间一个区间的导，基本是一次导出5万条吧，这里略去了</p>\n<p>接着重命名将新表替换上去：</p>\n<p><code>RENAME TABLE members TO members_bak,members_tmp TO members;</code></p>\n<p>就是这样，基本可以做到无损失，无需停机更新表结构，但实际上RENAME期间表是被锁死的，所以选择在线少的时候操作是一个技巧。经过这个操作，使得原先8G多的表，一下子变成了2G多</p>\n<p>另外还讲到了mysql中float字段类型的时候出现的诡异现象，就是在pma中看到的数字根本不能作为条件来查询</p>\n<p>3、常用SQL语句优化：</p>\n<p>数据库(表)设计合理</p>\n<p>我们的表设计要符合3NF 3范式(规范的模式) , 有时我们需要适当的逆范式</p>\n<p>sql语句的优化(索引，常用小技巧.)</p>\n<p>数据的配置(缓存设大)</p>\n<p>适当硬件配置和操作系统 (读写分离.)</p>\n<p>数据的3NF</p>\n<p>1NF :就是具有原子性，不可分割.(只要使用的是关系性数据库，就自动符合)</p>\n<p>2NF: 在满足1NF 的基础上，我们考虑是否满足2NF: 只要表的记录满足唯一性,也是说,你的同一张表，不可能出现完全相同的记录, 一般说我们在 表中设计一个主键即可.</p>\n<p>3NF: 在满足2NF 的基础上，我们考虑是否满足3NF：即我们的字段信息可以通过关联的关系，派生即可.(通常我们通过外键来处理)</p>\n<p>逆范式: 为什么需呀逆范式:</p>\n<p>(相册的功能对应数据库的设计)</p>\n<p>适当的逆范式.</p>\n<p>sql语句的优化</p>\n<p>sql语句有几类</p>\n<p>ddl (数据定义语言) [create alter drop]</p>\n<p>dml(数据操作语言)[insert delete upate ]</p>\n<p>select</p>\n<p>dtl(数据事务语句) [commit rollback savepoint]</p>\n<p>dcl(数据控制语句) [grant revoke]</p>\n<p>show status命令</p>\n<p>该命令可以显示你的mysql数据库的当前状态.我们主要关心的是 “com”开头的指令</p>\n<p>show status like ‘Com%’ &lt;&#x3D;&gt; show session status like ‘Com%’ &#x2F;&#x2F;显示当前控制台的情况</p>\n<p>show global status like ‘Com%’ ; &#x2F;&#x2F;显示数据库从启动到 查询的次数</p>\n<p>显示连接数据库次数</p>\n<p>show status like ‘Connections’;</p>\n<p>这里我们优化的重点是在 慢查询. (在默认情况下是10 ) mysql5.5.19</p>\n<p>显示查看慢查询的情况</p>\n<p>show variables like ‘long_query_time’</p>\n<p>为了教学，我们搞一个海量表(mysql存储过程)</p>\n<p>目的，就是看看怎样处理，在海量表中，查询的速度很快!</p>\n<p>select * from emp where empno&#x3D;123456;</p>\n<p>需求：如何在一个项目中，找到慢查询的select , mysql数据库支持把慢查询语句，记录到日志中，程序员分析. (但是注意，默认情况下不启动.)</p>\n<p>步骤:</p>\n<p>要这样启动mysql</p>\n<p>进入到 mysql安装目录</p>\n<p>启动 xx&gt;binmysqld.exe –slow-query-log 这点注意<br>测试 ,比如我们把</p>\n<p>select * from emp where empno&#x3D;34678 ；</p>\n<p>用了1.5秒，我现在优化.</p>\n<p>快速体验: 在emp表的 empno建立索引.</p>\n<p>alter table emp add primary key(empno);</p>\n<p>&#x2F;&#x2F;删除主键索引</p>\n<p>alter table emp drop primary key</p>\n<p>然后，再查速度变快.</p>\n<p>l 索引的原理</p>\n<p>介绍一款非常重要工具explain, 这个分析工具可以对 sql语句进行分析,可以预测你的sql执行的效率.</p>\n<p>他的基本用法是:</p>\n<p>explain sql语句G</p>\n<p>&#x2F;&#x2F;根据返回的信息，我们可知,该sql语句是否使用索引，从多少记录中取出,可以看到排序的方式.</p>\n<p>l 在什么列上添加索引比较合适</p>\n<p>① 在经常查询的列上加索引.</p>\n<p>② 列的数据，内容就只有少数几个值,不太适合加索引.</p>\n<p>③ 内容频繁变化，不合适加索引</p>\n<p>l 索引的种类</p>\n<p>① 主键索引 (把某列设为主键，则就是主键索引)</p>\n<p>② 唯一索引(unique) （即该列具有唯一性，同时又是索引）</p>\n<p>③ index （普通索引）</p>\n<p>④ 全文索引(FULLTEXT)</p>\n<p><code>select * from article where content like ‘%李连杰%’;</code></p>\n<p>hello, i am a boy</p>\n<p>l 你好，我是一个男孩 &#x3D;&gt;中文 sphinx</p>\n<p>⑤ 复合索引(多列和在一起)</p>\n<p><code>create index myind on 表名 (列1,列2);</code></p>\n<p>l 如何创建索引</p>\n<p>如果创建unique &#x2F; 普通&#x2F;fulltext 索引</p>\n<p><code>create [unique|FULLTEXT] index 索引名 on 表名 (列名…)</code><br><code>alter table 表名 add index 索引名 (列名…)</code><br>&#x2F;&#x2F;如果要添加主键索引</p>\n<p><code>alter table 表名 add primary key (列…)</code></p>\n<p>删除索引</p>\n<p><code>drop index 索引名 on 表名</code></p>\n<p><code>alter table 表名 drop index index_name;</code></p>\n<p><code>alter table 表名 drop primary key</code></p>\n<p>显示索引</p>\n<p><code>show index(es) from 表名</code></p>\n<p><code>show keys from 表名</code></p>\n<p><code>desc 表名</code></p>\n<p>如何查询某表的索引</p>\n<p><code>show indexes from 表名</code></p>\n<p>l 使用索引的注意事项</p>\n<p>查询要使用索引最重要的条件是查询条件中需要使用索引。</p>\n<p>下列几种情况下有可能使用到索引：</p>\n<p>1，对于创建的多列索引，只要查询条件使用了最左边的列，索引一般就会被使用。</p>\n<p>2，对于使用like的查询，查询如果是 ‘�a’ 不会使用到索引 aaa%’ 会使用到索引。</p>\n<p>下列的表将不使用索引：</p>\n<p>1，如果条件中有or，即使其中有条件带索引也不会使用。</p>\n<p>2，对于多列索引，不是使用的第一部分，则不会使用索引。</p>\n<p>3，like查询是以%开头</p>\n<p>4，如果列类型是字符串，那一定要在条件中将数据使用引号引用起来。否则不使用索引。</p>\n<p>5，如果mysql估计使用全表扫描要比使用索引快，则不使用索引。</p>\n<p>l 如何检测你的索引是否有效</p>\n<p>结论: Handler_read_key 越大越少</p>\n<p>Handler_read_rnd_next 越小越好</p>\n<p>fdisk</p>\n<p>find</p>\n<p>l MyISAM 和 Innodb区别是什么</p>\n<p>MyISAM 不支持外键, Innodb支持</p>\n<p>MyISAM 不支持事务,不支持外键.</p>\n<p>对数据信息的存储处理方式不同.（如果存储引擎是MyISAM的，则创建一张表，对于三个文件..,如果是Innodb则只有一张文件 *.frm,数据存放到ibdata1）</p>\n<p>对于 MyISAM 数据库，需要定时清理</p>\n<p>optimize table 表名</p>\n<p>l 常见的sql优化手法</p>\n<p>使用order by null 禁用排序</p>\n<p>比如<code> select A/B/C from dept group by ename order by null</code></p>\n<p>在精度要求高的应用中，建议使用定点数(decimal)来存储数值，以保证结果的准确性</p>\n<ol start=\"3\">\n<li>如果字段是字符类型的索引，用作条件查询时一定要加单引号，不然索引无效。</li>\n</ol>\n<p>主键索引如果没用到，再查询for update这种情况，会造成表锁定。容易造成卡死。<br>1000000.32 万</p>\n<p><code>create table sal(t1 float(10,2));</code></p>\n<p><code>create table sal2(t1 decimal(10,2));</code></p>\n<p>问?在php中 ,int 如果是一个有符号数，最大值. int- 4*8&#x3D;32 2 31 -1</p>\n<p>l 表的水平划分</p>\n<p>l 垂直分割表</p>\n<p>如果你的数据库的存储引擎是MyISAM的，则当创建一个表，后三个文件. .frm 记录表结构. .myd 数据 *.myi 这个是索引.</p>\n<p>mysql5.5.19的版本，数据库文件，默认放在 （看 my.ini文件中的配置.）</p>\n<p>转自<a href=\"https://www.toutiao.com/i6583260372269007374/?tt_from=mobile_qq&amp;utm_campaign=client_share&amp;timestamp=1533830508&amp;app=news_article&amp;utm_source=mobile_qq&amp;iid=39018175817&amp;utm_medium=toutiao_ios&amp;group_id=6583260372269007374\">https://www.toutiao.com/i6583260372269007374/?tt_from=mobile_qq&amp;utm_campaign=client_share&amp;timestamp=1533830508&amp;app=news_article&amp;utm_source=mobile_qq&amp;iid=39018175817&amp;utm_medium=toutiao_ios&amp;group_id=6583260372269007374</a></p>\n\n","categories":[{"name":"数据库","path":"api/categories/数据库.json"}],"tags":[{"name":"mysql","path":"api/tags/mysql.json"}]}