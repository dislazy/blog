{"title":"Spring中几种常用的Bean配置方式","slug":"Spring中几种常用的Bean配置方式","date":"2018-10-14T09:47:27.000Z","updated":"2022-06-02T01:05:59.615Z","comments":true,"path":"api/articles/Spring中几种常用的Bean配置方式.json","excerpt":"Spring 3.x提供了三种配置，分别是：基于XML的配置、基于注解的配置和基于Java类的配置。下面分别介绍下这三种配置方式；首先定义一个用于举例的JavaBean。","covers":null,"content":"<p>Spring 3.x提供了三种配置，分别是：基于XML的配置、基于注解的配置和基于Java类的配置。</p>\n<p>下面分别介绍下这三种配置方式；首先定义一个用于举例的JavaBean。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package  com.abc.service</span><br><span class=\"line\">public class userService&#123;   </span><br><span class=\"line\">    ……   </span><br><span class=\"line\">    // 用于设置初始化方法   </span><br><span class=\"line\">    public void init() &#123;   </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">  </span><br><span class=\"line\">    // 用于设置销毁方法   </span><br><span class=\"line\">    public void destory() &#123;   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<div class=\"story post-story\"><h2 id=\"1-基于XML配置\"><a href=\"#1-基于XML配置\" class=\"headerlink\" title=\"1.基于XML配置\"></a>1.基于XML配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=“userService” class=“com.abc.service.impl.userServiceImpl”  </span><br><span class=\"line\">        lazy-init=“true” init-method=“init” destroy-method=“destory”  </span><br><span class=\"line\">        scope=“prototype”&gt;  </span><br><span class=\"line\">        ……   </span><br><span class=\"line\">&lt;/bean&gt;  </span><br></pre></td></tr></table></figure>\n<p>在XML配置中，通过<bean> </bean>来定义Bean，通过id或name属性定义Bean的名称，如果未指定id和name属性，Spring则自动将全限定类名作为Bean的名称。通过<property>子元素或者p命名空间的动态属性为Bean注入值。还可以通过<bean>的init-method和destory-method属性指定Bean实现类的方法名来设置生命过程方法（最多指定一个初始化方法和销毁方法）。通过<bean>的scope指定Bean的作用范围。听过<bean>的lazy-init属性指定是否延迟初始化。</p>\n<p>当Bean的实现类来源于第三方类库，比如DataSource、HibernateTemplate等，无法在类中标注注解信息，只能通过XML进行配置；而且命名空间的配置，比如aop、context等，也只能采用基于XML的配置。</p>\n</div><div class=\"story post-story\"><h2 id=\"2-基于注解的配置\"><a href=\"#2-基于注解的配置\" class=\"headerlink\" title=\"2.基于注解的配置\"></a>2.基于注解的配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Scope(“prototype”)   </span><br><span class=\"line\">@Lazy(true)   </span><br><span class=\"line\">@Component(“userService”)   </span><br><span class=\"line\">public class userService&#123;   </span><br><span class=\"line\">    ……   </span><br><span class=\"line\">    // 用于设置初始化方法   </span><br><span class=\"line\">    @PostConstruct  </span><br><span class=\"line\">    public void init() &#123;   </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">  </span><br><span class=\"line\">    // 用于设置销毁方法   </span><br><span class=\"line\">    @PreDestroy  </span><br><span class=\"line\">    public void destory() &#123;   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n\n<p> 在Bean实现类中通过一些Annotation来标注Bean类：</p>\n<ul>\n<li><p>@Component：标注一个普通的Spring Bean类（可以指定Bean名称，未指定时默认为小写字母开头的类名）</p>\n</li>\n<li><p>@Controller：标注一个控制器类</p>\n</li>\n<li><p>@Service：标注一个业务逻辑类</p>\n</li>\n<li><p>@Repository：标注一个DAO类</p>\n</li>\n</ul>\n<p>通过在成员变量或者方法入参处标注@Autowired按类型匹配注入，也可以使用@Qualifier按名称配置注入。通过在方法上标注@PostConstrut和PreDestroy注解指定的初始化方法和销毁方法（可以定义任意多个）。通过@Scope(“prototype”)指定Bean的作用范围。通过在类定义处标注@Lazy(true)指定Bean的延迟加载。</p>\n<p>当Bean的实现类是当前项目开发的，可以直接在Java类中使用基于注解的配置，配置比较简单。</p>\n</div><div class=\"story post-story\"><h2 id=\"3-基于Java类配置\"><a href=\"#3-基于Java类配置\" class=\"headerlink\" title=\"3.基于Java类配置\"></a>3.基于Java类配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration  </span><br><span class=\"line\">public class Conf &#123;   </span><br><span class=\"line\">    @Scope(“prototype”)   </span><br><span class=\"line\">    @Bean(“userService”)   </span><br><span class=\"line\">    public userService userService() &#123;   </span><br><span class=\"line\">        return new userService();   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n\n<p>在标注了@Configuration的java类中，通过在类方法标注@Bean定义一个Bean。方法必须提供Bean的实例化逻辑。通过@Bean的name属性可以定义Bean的名称，未指定时默认名称为方法名。在方法处通过@Autowired使方法入参绑定Bean，然后在方法中通过代码进行注入；也可以调用配置类的@Bean方法进行注入。通过@Bean的initMethod或destroyMethod指定一个初始化或者销毁方法。通过Bean方法定义处标注@Scope指定Bean的作用范围。通过在Bean方法定义处标注@Lazy指定Bean的延迟初始化。</p>\n<p>当实例化Bean的逻辑比较复杂时，则比较适合基于Java类配置的方式。</p>\n<p>转自<a href=\"https://blog.csdn.net/iloveyin/article/details/51019225\">https://blog.csdn.net/iloveyin/article/details/51019225</a></p>\n\n</div>","more":"\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package  com.abc.service</span><br><span class=\"line\">public class userService&#123;   </span><br><span class=\"line\">    ……   </span><br><span class=\"line\">    // 用于设置初始化方法   </span><br><span class=\"line\">    public void init() &#123;   </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">  </span><br><span class=\"line\">    // 用于设置销毁方法   </span><br><span class=\"line\">    public void destory() &#123;   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<div class=\"story post-story\"><h2 id=\"1-基于XML配置\"><a href=\"#1-基于XML配置\" class=\"headerlink\" title=\"1.基于XML配置\"></a>1.基于XML配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bean id=“userService” class=“com.abc.service.impl.userServiceImpl”  </span><br><span class=\"line\">        lazy-init=“true” init-method=“init” destroy-method=“destory”  </span><br><span class=\"line\">        scope=“prototype”&gt;  </span><br><span class=\"line\">        ……   </span><br><span class=\"line\">&lt;/bean&gt;  </span><br></pre></td></tr></table></figure>\n<p>在XML配置中，通过<bean> </bean>来定义Bean，通过id或name属性定义Bean的名称，如果未指定id和name属性，Spring则自动将全限定类名作为Bean的名称。通过<property>子元素或者p命名空间的动态属性为Bean注入值。还可以通过<bean>的init-method和destory-method属性指定Bean实现类的方法名来设置生命过程方法（最多指定一个初始化方法和销毁方法）。通过<bean>的scope指定Bean的作用范围。听过<bean>的lazy-init属性指定是否延迟初始化。</bean></bean></bean></property></p>\n<p>当Bean的实现类来源于第三方类库，比如DataSource、HibernateTemplate等，无法在类中标注注解信息，只能通过XML进行配置；而且命名空间的配置，比如aop、context等，也只能采用基于XML的配置。</p>\n</div><div class=\"story post-story\"><h2 id=\"2-基于注解的配置\"><a href=\"#2-基于注解的配置\" class=\"headerlink\" title=\"2.基于注解的配置\"></a>2.基于注解的配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Scope(“prototype”)   </span><br><span class=\"line\">@Lazy(true)   </span><br><span class=\"line\">@Component(“userService”)   </span><br><span class=\"line\">public class userService&#123;   </span><br><span class=\"line\">    ……   </span><br><span class=\"line\">    // 用于设置初始化方法   </span><br><span class=\"line\">    @PostConstruct  </span><br><span class=\"line\">    public void init() &#123;   </span><br><span class=\"line\">  </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">  </span><br><span class=\"line\">    // 用于设置销毁方法   </span><br><span class=\"line\">    @PreDestroy  </span><br><span class=\"line\">    public void destory() &#123;   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n\n<p> 在Bean实现类中通过一些Annotation来标注Bean类：</p>\n<ul>\n<li><p>@Component：标注一个普通的Spring Bean类（可以指定Bean名称，未指定时默认为小写字母开头的类名）</p>\n</li>\n<li><p>@Controller：标注一个控制器类</p>\n</li>\n<li><p>@Service：标注一个业务逻辑类</p>\n</li>\n<li><p>@Repository：标注一个DAO类</p>\n</li>\n</ul>\n<p>通过在成员变量或者方法入参处标注@Autowired按类型匹配注入，也可以使用@Qualifier按名称配置注入。通过在方法上标注@PostConstrut和PreDestroy注解指定的初始化方法和销毁方法（可以定义任意多个）。通过@Scope(“prototype”)指定Bean的作用范围。通过在类定义处标注@Lazy(true)指定Bean的延迟加载。</p>\n<p>当Bean的实现类是当前项目开发的，可以直接在Java类中使用基于注解的配置，配置比较简单。</p>\n</div><div class=\"story post-story\"><h2 id=\"3-基于Java类配置\"><a href=\"#3-基于Java类配置\" class=\"headerlink\" title=\"3.基于Java类配置\"></a>3.基于Java类配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration  </span><br><span class=\"line\">public class Conf &#123;   </span><br><span class=\"line\">    @Scope(“prototype”)   </span><br><span class=\"line\">    @Bean(“userService”)   </span><br><span class=\"line\">    public userService userService() &#123;   </span><br><span class=\"line\">        return new userService();   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n\n<p>在标注了@Configuration的java类中，通过在类方法标注@Bean定义一个Bean。方法必须提供Bean的实例化逻辑。通过@Bean的name属性可以定义Bean的名称，未指定时默认名称为方法名。在方法处通过@Autowired使方法入参绑定Bean，然后在方法中通过代码进行注入；也可以调用配置类的@Bean方法进行注入。通过@Bean的initMethod或destroyMethod指定一个初始化或者销毁方法。通过Bean方法定义处标注@Scope指定Bean的作用范围。通过在Bean方法定义处标注@Lazy指定Bean的延迟初始化。</p>\n<p>当实例化Bean的逻辑比较复杂时，则比较适合基于Java类配置的方式。</p>\n<p>转自<a href=\"https://blog.csdn.net/iloveyin/article/details/51019225\">https://blog.csdn.net/iloveyin/article/details/51019225</a></p>\n\n</div>","categories":[{"name":"Java","path":"api/categories/Java.json"}],"tags":[{"name":"Spring","path":"api/tags/Spring.json"}]}