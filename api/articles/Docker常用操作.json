{"title":"Docker","slug":"Docker常用操作","date":"2018-10-14T12:57:48.000Z","updated":"2022-06-02T01:05:59.612Z","comments":true,"path":"api/articles/Docker常用操作.json","excerpt":"docker ps  查看运行正常进程docker ps -a  查看所有存在过进程","covers":null,"content":"<p><code>docker ps</code>  查看运行正常进程</p>\n<p><code>docker ps -a </code> 查看所有存在过进程</p>\n<p><code>docker search XXX</code> 搜索镜像</p>\n<p><code>docker rm -f xxx</code>  删除images</p>\n<p><code>docker load &lt; 镜像名称</code> 导入镜像</p>\n<p><code>docker pull  +镜像名称</code>  下载镜像</p>\n<p><code>docker logs -f +查看容器Id</code>   查看容器运行日志</p>\n<p><code>docker save -o  导出文件名称   镜像名</code>    导出镜像</p>\n<p><code>docker tag &lt;IMAGE ID&gt;  &lt;REPOSITORY NAME&gt;</code>  复制并修改镜像名称</p>\n<p><code>mvn clean package docker:build java</code> 打包成镜像</p>\n<p><code>docker run -d -p 1200:1200 -v /data:/data  镜像名称</code>  运行容器</p>\n<p><code>docker logs -f  --tail=10  容器Id</code>  查看实时日志</p>\n<p><code>docker exec -it 容器ID/别名   /bin/bash</code> 进入 容器</p>\n<p><code>docker exec -it &lt;image&gt; sh</code>  进入容器</p>\n<p><code>docker version</code> 查看docker的版本号，包括客户端、服务端、依赖的Go等</p>\n<p><code>docker info</code> 查看系统(docker)层面信息，包括管理的images, containers数等</p>\n<p><code>docker search &lt;image&gt;</code> 在docker index中搜索image</p>\n<p><code>docker pull &lt;image&gt; </code>从docker registry server 中下拉image</p>\n<p><code>docker push &lt;image|repository&gt;</code> 推送一个image或repository到registry</p>\n<p><code>docker push &lt;image|repository&gt;:TAG</code> 同上，指定tag</p>\n<p><code>docker inspect &lt;image|container&gt;</code> 查看image或container的底层信息</p>\n<p><code>docker images TODO filter out the intermediate image layers</code> (intermediate image layers 是什么)</p>\n<p><code>docker images -a</code> 列出所有的images</p>\n<p><code>docker ps</code> 默认显示正在运行中的container</p>\n<p><code>docker ps -l</code> 显示最后一次创建的container，包括未运行的</p>\n<p><code>docker ps -a</code> 显示所有的container，包括未运行的</p>\n<p><code>docker logs &lt;container&gt;</code> 查看container的日志，也就是执行命令的一些输出</p>\n<p><code>docker rm &lt;container...&gt;</code> 删除一个或多个container</p>\n<p><code>docker rm </code>docker ps -a -q&#96;&#96; 删除所有的container</p>\n<p><code>docker ps -a -q | xargs docker rm</code> 同上, 删除所有的container</p>\n<p><code>docker rmi &lt;image...&gt;</code> 删除一个或多个image</p>\n<p><code>docker start/stop/restart &lt;container&gt;</code> 开启&#x2F;停止&#x2F;重启container</p>\n<p><code>docker start -i &lt;container&gt;</code> 启动一个container并进入交互模式</p>\n<p><code>docker attach &lt;container&gt;</code> attach一个运行中的container</p>\n<p><code>docker commit &lt;container&gt; [repo:tag]</code> 将一个container固化为一个新的image，后面的repo:tag可选</p>\n<p><code>docker build &lt;path&gt;</code> 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image</p>\n<p><code>docker build -t repo[:tag]</code> 同上，可以指定repo和可选的tag</p>\n<p><code>docker build - &lt; &lt;dockerfile&gt;</code> 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image</p>\n<p><code>docker port &lt;container&gt; &lt;container port&gt;</code> 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到</p>\n\n","more":"\n<p><code>docker search XXX</code> 搜索镜像</p>\n<p><code>docker rm -f xxx</code>  删除images</p>\n<p><code>docker load &lt; 镜像名称</code> 导入镜像</p>\n<p><code>docker pull  +镜像名称</code>  下载镜像</p>\n<p><code>docker logs -f +查看容器Id</code>   查看容器运行日志</p>\n<p><code>docker save -o  导出文件名称   镜像名</code>    导出镜像</p>\n<p><code>docker tag &lt;IMAGE ID&gt;  &lt;REPOSITORY NAME&gt;</code>  复制并修改镜像名称</p>\n<p><code>mvn clean package docker:build java</code> 打包成镜像</p>\n<p><code>docker run -d -p 1200:1200 -v /data:/data  镜像名称</code>  运行容器</p>\n<p><code>docker logs -f  --tail=10  容器Id</code>  查看实时日志</p>\n<p><code>docker exec -it 容器ID/别名   /bin/bash</code> 进入 容器</p>\n<p><code>docker exec -it &lt;image&gt; sh</code>  进入容器</p>\n<p><code>docker version</code> 查看docker的版本号，包括客户端、服务端、依赖的Go等</p>\n<p><code>docker info</code> 查看系统(docker)层面信息，包括管理的images, containers数等</p>\n<p><code>docker search &lt;image&gt;</code> 在docker index中搜索image</p>\n<p><code>docker pull &lt;image&gt; </code>从docker registry server 中下拉image</p>\n<p><code>docker push &lt;image|repository&gt;</code> 推送一个image或repository到registry</p>\n<p><code>docker push &lt;image|repository&gt;:TAG</code> 同上，指定tag</p>\n<p><code>docker inspect &lt;image|container&gt;</code> 查看image或container的底层信息</p>\n<p><code>docker images TODO filter out the intermediate image layers</code> (intermediate image layers 是什么)</p>\n<p><code>docker images -a</code> 列出所有的images</p>\n<p><code>docker ps</code> 默认显示正在运行中的container</p>\n<p><code>docker ps -l</code> 显示最后一次创建的container，包括未运行的</p>\n<p><code>docker ps -a</code> 显示所有的container，包括未运行的</p>\n<p><code>docker logs &lt;container&gt;</code> 查看container的日志，也就是执行命令的一些输出</p>\n<p><code>docker rm &lt;container...&gt;</code> 删除一个或多个container</p>\n<p><code>docker rm </code>docker ps -a -q&#96;&#96; 删除所有的container</p>\n<p><code>docker ps -a -q | xargs docker rm</code> 同上, 删除所有的container</p>\n<p><code>docker rmi &lt;image...&gt;</code> 删除一个或多个image</p>\n<p><code>docker start/stop/restart &lt;container&gt;</code> 开启&#x2F;停止&#x2F;重启container</p>\n<p><code>docker start -i &lt;container&gt;</code> 启动一个container并进入交互模式</p>\n<p><code>docker attach &lt;container&gt;</code> attach一个运行中的container</p>\n<p><code>docker commit &lt;container&gt; [repo:tag]</code> 将一个container固化为一个新的image，后面的repo:tag可选</p>\n<p><code>docker build &lt;path&gt;</code> 寻找path路径下名为的Dockerfile的配置文件，使用此配置生成新的image</p>\n<p><code>docker build -t repo[:tag]</code> 同上，可以指定repo和可选的tag</p>\n<p><code>docker build - &lt; &lt;dockerfile&gt;</code> 使用指定的dockerfile配置文件，docker以stdin方式获取内容，使用此配置生成新的image</p>\n<p><code>docker port &lt;container&gt; &lt;container port&gt;</code> 查看本地哪个端口映射到container的指定端口，其实用docker ps 也可以看到</p>\n\n","categories":[{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"}]}