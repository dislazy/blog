{"title":"Java中关于货币金额的计算","slug":"Java中关于货币金额的计算","date":"2019-10-27T12:53:42.000Z","updated":"2022-06-02T01:05:59.613Z","comments":true,"path":"api/articles/Java中关于货币金额的计算.json","excerpt":"BigDecimal的由来由于互联网金额的高发达和高统一性，关于货币的金额基本都是精确到分，因此double在货币计算中可以说用武之地比较小，Java提供了一个非常强大的货币金额计算工具：BigDecimal","covers":null,"content":"<h3 id=\"BigDecimal的由来\"><a href=\"#BigDecimal的由来\" class=\"headerlink\" title=\"BigDecimal的由来\"></a>BigDecimal的由来</h3><p>由于互联网金额的高发达和高统一性，关于货币的金额基本都是精确到分，因此double在货币计算中可以说用武之地比较小，Java提供了一个非常强大的货币金额计算工具：BigDecimal</p>\n<h3 id=\"BigDecimal的基本使用\"><a href=\"#BigDecimal的基本使用\" class=\"headerlink\" title=\"BigDecimal的基本使用\"></a>BigDecimal的基本使用</h3><p>&#x3D;&#x3D;如果需要进行精确计算，务必将对应数字转化为String来构造BigDecimal&#x3D;&#x3D;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10.1234</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">5.3134</span>;</span><br><span class=\"line\">    <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimalA</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(String.valueOf(a));</span><br><span class=\"line\">    <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimalB</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(String.valueOf(b));</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用BigDecimal做加法运算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">addValue</span> <span class=\"operator\">=</span> bigDecimalA.add(bigDecimalB).doubleValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用BigDecimal做减法运算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">subtractValue</span> <span class=\"operator\">=</span> bigDecimalA.subtract(bigDecimalB).doubleValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用BigDecimal做乘法运算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">multiplyValue</span> <span class=\"operator\">=</span> bigDecimalA.multiply(bigDecimalB).doubleValue();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用BigDecimal做除法运算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">scale</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;<span class=\"comment\">//保留2位小数</span></span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">divideValue</span> <span class=\"operator\">=</span> bigDecimalA.divide(bigDecimalB, scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用BigDecimal的加减乘除进行复杂运算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;2019.1027&quot;</span>)</span><br><span class=\"line\">            .divide(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;4.10&quot;</span>), scale, BigDecimal.ROUND_HALF_UP)</span><br><span class=\"line\">            .multiply(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;1024&quot;</span>))</span><br><span class=\"line\">            .add(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;1234&quot;</span>)).intValue();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BigDecimal计算结果精度的控制\"><a href=\"#BigDecimal计算结果精度的控制\" class=\"headerlink\" title=\"BigDecimal计算结果精度的控制\"></a>BigDecimal计算结果精度的控制</h3><ul>\n<li><p><strong>ROUND_UP</strong> 舍入远离零的舍入模式：在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。</p>\n</li>\n<li><p><strong>ROUND_DOWN</strong> 接近零的舍入模式：在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。</p>\n</li>\n<li><p><strong>ROUND_CEILING</strong> 接近正无穷大的舍入模式：如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同;如果为负，则舍入模式与ROUND_DOWN相同。</p>\n</li>\n<li><p><strong>ROUND_FLOOR</strong> 接近负无穷大的舍入模式：如果BigDecimal 为负，则舍入行为ROUND_DOWN相同；反之亦然。</p>\n</li>\n<li><p><strong>ROUND_HALF_UP</strong>  四舍五入：向最接近的数字舍入，如果为5及以上则同样进一；5以下舍弃。</p>\n</li>\n<li><p><strong>ROUND_HALF_DOWN</strong> 五舍六入：向最接近的数字舍入，如果为6及以上则进一，6以下舍弃。</p>\n</li>\n<li><p><strong>ROUND_HALF_EVEN</strong>   向“最接近的”数字舍入：如果与两个相邻数字的距离相等，则向相邻的偶数舍入： 如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同;如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。示例: 保留小数点后1位，则：1.15 -&gt; 1.2；1.25 -&gt;1.2</p>\n</li>\n<li><p><strong>ROUND_UNNECESSARY</strong> 断言请求的操作具有精确的结果，因此不需要舍入：如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。</p>\n</li>\n</ul>\n<p>  在以上的精确控制中，比较常用的是<strong>ROUND_HALF_UP</strong>和 <strong>ROUND_HALF_EVEN</strong>  ；互联网计算精度最最常用的是<strong>ROUND_HALF_EVEN</strong>。</p>\n<h3 id=\"double数据的常用格式化\"><a href=\"#double数据的常用格式化\" class=\"headerlink\" title=\"double数据的常用格式化\"></a>double数据的常用格式化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//格式化</span></span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">1834234847.2345</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将dobule数据进行正常的转化为String</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> NumberFormat.getNumberInstance().format(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将dobule数据进行正常的转化为int，小数会进行四舍五入，然后转化为String</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    value = NumberFormat.getIntegerInstance().format(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置小数部分的范围后然后转化为String-可使用于转化格式为货币</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">NumberFormat</span> <span class=\"variable\">currency</span> <span class=\"operator\">=</span> NumberFormat.getCurrencyInstance();</span><br><span class=\"line\">    <span class=\"comment\">//设置数的小数部分所允许的最小位数(如果不足后面补0)</span></span><br><span class=\"line\">    currency.setMinimumFractionDigits(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置数的小数部分所允许的最大位数(如果超过会四舍五入)</span></span><br><span class=\"line\">    currency.setMaximumFractionDigits(<span class=\"number\">4</span>);</span><br><span class=\"line\">    value = currency.format(num);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置格式为%分比格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">NumberFormat</span> <span class=\"variable\">percent</span> <span class=\"operator\">=</span> NumberFormat.getPercentInstance();</span><br><span class=\"line\">    <span class=\"comment\">//设置数的小数部分所允许的最小位数(如果不足后面补0)</span></span><br><span class=\"line\">    percent.setMinimumFractionDigits(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置数的小数部分所允许的最大位数(如果超过会四舍五入)</span></span><br><span class=\"line\">    percent.setMaximumFractionDigits(<span class=\"number\">3</span>);</span><br><span class=\"line\">    value = percent.format(num);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","more":"\n<h3 id=\"BigDecimal的基本使用\"><a href=\"#BigDecimal的基本使用\" class=\"headerlink\" title=\"BigDecimal的基本使用\"></a>BigDecimal的基本使用</h3><p>&#x3D;&#x3D;如果需要进行精确计算，务必将对应数字转化为String来构造BigDecimal&#x3D;&#x3D;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10.1234</span>;</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">5.3134</span>;</span><br><span class=\"line\">    <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimalA</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(String.valueOf(a));</span><br><span class=\"line\">    <span class=\"type\">BigDecimal</span> <span class=\"variable\">bigDecimalB</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(String.valueOf(b));</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用BigDecimal做加法运算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">addValue</span> <span class=\"operator\">=</span> bigDecimalA.add(bigDecimalB).doubleValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用BigDecimal做减法运算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">subtractValue</span> <span class=\"operator\">=</span> bigDecimalA.subtract(bigDecimalB).doubleValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用BigDecimal做乘法运算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">multiplyValue</span> <span class=\"operator\">=</span> bigDecimalA.multiply(bigDecimalB).doubleValue();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用BigDecimal做除法运算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">scale</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;<span class=\"comment\">//保留2位小数</span></span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">divideValue</span> <span class=\"operator\">=</span> bigDecimalA.divide(bigDecimalB, scale, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用BigDecimal的加减乘除进行复杂运算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;2019.1027&quot;</span>)</span><br><span class=\"line\">            .divide(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;4.10&quot;</span>), scale, BigDecimal.ROUND_HALF_UP)</span><br><span class=\"line\">            .multiply(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;1024&quot;</span>))</span><br><span class=\"line\">            .add(<span class=\"keyword\">new</span> <span class=\"title class_\">BigDecimal</span>(<span class=\"string\">&quot;1234&quot;</span>)).intValue();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BigDecimal计算结果精度的控制\"><a href=\"#BigDecimal计算结果精度的控制\" class=\"headerlink\" title=\"BigDecimal计算结果精度的控制\"></a>BigDecimal计算结果精度的控制</h3><ul>\n<li><p><strong>ROUND_UP</strong> 舍入远离零的舍入模式：在丢弃非零部分之前始终增加数字(始终对非零舍弃部分前面的数字加1)。</p>\n</li>\n<li><p><strong>ROUND_DOWN</strong> 接近零的舍入模式：在丢弃某部分之前始终不增加数字(从不对舍弃部分前面的数字加1，即截短)。</p>\n</li>\n<li><p><strong>ROUND_CEILING</strong> 接近正无穷大的舍入模式：如果 BigDecimal 为正，则舍入行为与 ROUND_UP 相同;如果为负，则舍入模式与ROUND_DOWN相同。</p>\n</li>\n<li><p><strong>ROUND_FLOOR</strong> 接近负无穷大的舍入模式：如果BigDecimal 为负，则舍入行为ROUND_DOWN相同；反之亦然。</p>\n</li>\n<li><p><strong>ROUND_HALF_UP</strong>  四舍五入：向最接近的数字舍入，如果为5及以上则同样进一；5以下舍弃。</p>\n</li>\n<li><p><strong>ROUND_HALF_DOWN</strong> 五舍六入：向最接近的数字舍入，如果为6及以上则进一，6以下舍弃。</p>\n</li>\n<li><p><strong>ROUND_HALF_EVEN</strong>   向“最接近的”数字舍入：如果与两个相邻数字的距离相等，则向相邻的偶数舍入： 如果舍弃部分左边的数字为奇数，则舍入行为与 ROUND_HALF_UP 相同;如果为偶数，则舍入行为与 ROUND_HALF_DOWN 相同。示例: 保留小数点后1位，则：1.15 -&gt; 1.2；1.25 -&gt;1.2</p>\n</li>\n<li><p><strong>ROUND_UNNECESSARY</strong> 断言请求的操作具有精确的结果，因此不需要舍入：如果对获得精确结果的操作指定此舍入模式，则抛出ArithmeticException。</p>\n</li>\n</ul>\n<p>  在以上的精确控制中，比较常用的是<strong>ROUND_HALF_UP</strong>和 <strong>ROUND_HALF_EVEN</strong>  ；互联网计算精度最最常用的是<strong>ROUND_HALF_EVEN</strong>。</p>\n<h3 id=\"double数据的常用格式化\"><a href=\"#double数据的常用格式化\" class=\"headerlink\" title=\"double数据的常用格式化\"></a>double数据的常用格式化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//格式化</span></span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">1834234847.2345</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将dobule数据进行正常的转化为String</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> NumberFormat.getNumberInstance().format(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 将dobule数据进行正常的转化为int，小数会进行四舍五入，然后转化为String</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    value = NumberFormat.getIntegerInstance().format(num);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置小数部分的范围后然后转化为String-可使用于转化格式为货币</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">NumberFormat</span> <span class=\"variable\">currency</span> <span class=\"operator\">=</span> NumberFormat.getCurrencyInstance();</span><br><span class=\"line\">    <span class=\"comment\">//设置数的小数部分所允许的最小位数(如果不足后面补0)</span></span><br><span class=\"line\">    currency.setMinimumFractionDigits(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置数的小数部分所允许的最大位数(如果超过会四舍五入)</span></span><br><span class=\"line\">    currency.setMaximumFractionDigits(<span class=\"number\">4</span>);</span><br><span class=\"line\">    value = currency.format(num);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置格式为%分比格式</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">NumberFormat</span> <span class=\"variable\">percent</span> <span class=\"operator\">=</span> NumberFormat.getPercentInstance();</span><br><span class=\"line\">    <span class=\"comment\">//设置数的小数部分所允许的最小位数(如果不足后面补0)</span></span><br><span class=\"line\">    percent.setMinimumFractionDigits(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置数的小数部分所允许的最大位数(如果超过会四舍五入)</span></span><br><span class=\"line\">    percent.setMaximumFractionDigits(<span class=\"number\">3</span>);</span><br><span class=\"line\">    value = percent.format(num);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n","categories":[{"name":"Java","path":"api/categories/Java.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}