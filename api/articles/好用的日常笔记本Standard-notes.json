{"title":"好用的日常笔记本standard notes","slug":"好用的日常笔记本Standard-notes","date":"2021-07-11T13:22:01.000Z","updated":"2022-06-02T01:05:59.617Z","comments":true,"path":"api/articles/好用的日常笔记本Standard-notes.json","excerpt":"前言很久很久之前就一直在找一些好用的并且开源的note app，尝试过trilium、蚂蚁笔记、notion、语雀 都没有找到我心仪的那一款，要么是数据是存储在境外，一旦国家的墙更厚了，就尬了，另外一些就是数据很分散，备份出来的数据无法很顺利的导入到其他的app中。<br>直到有一天我发现了Standard notes。","covers":null,"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>很久很久之前就一直在找一些好用的并且开源的note app，尝试过trilium、蚂蚁笔记、notion、语雀 都没有找到我心仪的那一款，要么是数据是存储在境外，一旦国家的墙更厚了，就尬了，另外一些就是数据很分散，备份出来的数据无法很顺利的导入到其他的app中。<br>直到有一天我发现了Standard notes。</p>\n<h3 id=\"关于Standard-notes\"><a href=\"#关于Standard-notes\" class=\"headerlink\" title=\"关于Standard notes\"></a>关于Standard notes</h3><p><a href=\"https://standardnotes.com/\">Standard notes</a>是一款免费、开源且完全加密的笔记应用程序。</p>\n<p>简单介绍一些它的优点：</p>\n<ul>\n<li>开源 代码开源，可以自己创建对应的服务，将数据存储在自己的自建数据库中，这也是我最看重的一点</li>\n<li>免费 知识付费时代，有一些免费的可维护的项目也是很难得，该产品也是通过开源的形式，然后使用官方的服务队插件进行收费</li>\n<li>完全加密 按照文档的说法是完全的端到端加密，数据在浏览器进行接口传输之前就已经进行了加密，避免网络传输过程中被拦截后数据泄露的场景</li>\n</ul>\n<h3 id=\"部署Standard-notes\"><a href=\"#部署Standard-notes\" class=\"headerlink\" title=\"部署Standard notes\"></a>部署Standard notes</h3><p>Standard notes大部分语言是使用node写的，按照微服务的方式进行拆分，分为几大块：</p>\n<h4 id=\"服务层：\"><a href=\"#服务层：\" class=\"headerlink\" title=\"服务层：\"></a>服务层：</h4><ul>\n<li>同步服务器 业务逻辑的核心，负责对用户数据的所有操作。</li>\n<li>同步服务器 work 同步服务器 JS Worker 负责同步服务器 JS 可能为后台处理卸载的所有异步任务。这包括例如处理电子邮件备份、解决笔记重复问题、将笔记发送到扩展服务器等等。</li>\n<li>身份验证 该服务器负责所有授权和认证机制。身份验证是处理和处理所有与帐户相关的元数据的地方。</li>\n<li>身份验证 work Auth Worker 负责所有与认证和授权领域相关的异步任务例如，处理帐户删除请求和用户的注册后任务。</li>\n<li>API网关 这是整个架构的主要“入口点”。API 网关充当所有无法直接访问的服务的路由器和代理。<h4 id=\"数据层：\"><a href=\"#数据层：\" class=\"headerlink\" title=\"数据层：\"></a>数据层：</h4></li>\n<li>数据库 MySQL 数据库服务器。这是存储所有数据的地方。</li>\n<li>缓存 Redis 缓存节点，其中保留所有临时数据以进行性能优化和自动过期功能。在自托管模式下，Redis 默认用作服务与其work之间的通信队列。</li>\n</ul>\n<h4 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h4><p>我是使用的docker-compose 加上自己的公有云数据库和缓存进行部署的，官方给出的docker-compose文件可以参见:<a href=\"https://docs.standardnotes.org/self-hosting/docker/\">文档</a></p>\n<ul>\n<li>第一步：将<a href=\"https://github.com/standardnotes/standalone\">https://github.com/standardnotes/standalone</a> git仓库的内容clone或者下载下来放到服务器的对应目录</li>\n<li>第二步：进行对应的文件夹，然后执行：<code>./server.sh init</code></li>\n<li>第三步：编辑 .env文件配置自己的数据库以及对应的token，编辑docker文件内的api-gatewat.env文件和auth.env文件，修改对应的token</li>\n<li>第四步：当配置文件修改完成以后，执行<code>./server.sh start</code> 启动服务</li>\n<li>第五步：执行<code>./server.sh logs</code> 查看服务日志，如果出现问题根据对应的提示进行解决</li>\n<li>第六步：给api-gateway服务配置对应的代理，我是使用的nginx，用域名进行代理即可</li>\n</ul>\n<p>以上的所有步骤都可以在<a href=\"https://docs.standardnotes.org/self-hosting/docker/\">官方文档</a>中看到。</p>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><p>我的docker-compose根据官方的文件修改而来，使用的是自己的数据层，所以没有启动对应的数据库，如下，具体步骤可以参考以上文档。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  syncing-server-js:</span><br><span class=\"line\">    image: standardnotes/syncing-server-js:1.35.1</span><br><span class=\"line\">    entrypoint: [</span><br><span class=\"line\">      &quot;./docker/entrypoint.sh&quot;, &quot;start-web&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    env_file: .env</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      PORT: 3000</span><br><span class=\"line\">    restart: unless-stopped</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - standardnotes_standalone</span><br><span class=\"line\"></span><br><span class=\"line\">  syncing-server-js-worker:</span><br><span class=\"line\">    image: standardnotes/syncing-server-js:1.35.1</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - syncing-server-js</span><br><span class=\"line\">    entrypoint: [</span><br><span class=\"line\">      &quot;./wait-for.sh&quot;, &quot;syncing-server-js&quot;, &quot;3000&quot;,</span><br><span class=\"line\">       &quot;./docker/entrypoint.sh&quot;, &quot;start-worker&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    env_file: .env</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      PORT: 3000</span><br><span class=\"line\">    restart: unless-stopped</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - standardnotes_standalone</span><br><span class=\"line\"></span><br><span class=\"line\">  api-gateway:</span><br><span class=\"line\">    image: standardnotes/api-gateway:1.19.0</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - auth</span><br><span class=\"line\">      - syncing-server-js</span><br><span class=\"line\">    env_file: docker/api-gateway.env</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - $&#123;EXPOSED_PORT&#125;:3000</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      PORT: 3000</span><br><span class=\"line\">      AUTH_JWT_SECRET: &#x27;$&#123;AUTH_JWT_SECRET&#125;&#x27;</span><br><span class=\"line\">    entrypoint: [</span><br><span class=\"line\">      &quot;./wait-for.sh&quot;, &quot;auth&quot;, &quot;3000&quot;,</span><br><span class=\"line\">      &quot;./wait-for.sh&quot;, &quot;syncing-server-js&quot;, &quot;3000&quot;,</span><br><span class=\"line\">      &quot;./docker/entrypoint.sh&quot;, &quot;start-web&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - standardnotes_standalone</span><br><span class=\"line\"></span><br><span class=\"line\">  auth:</span><br><span class=\"line\">    image: standardnotes/auth:1.11.0</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - syncing-server-js</span><br><span class=\"line\">    entrypoint: [</span><br><span class=\"line\">      &quot;./wait-for.sh&quot;, &quot;syncing-server-js&quot;, &quot;3000&quot;,</span><br><span class=\"line\">      &quot;./docker/entrypoint.sh&quot;, &quot;start-web&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    env_file: docker/auth.env</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      PORT: 3000</span><br><span class=\"line\">      DB_HOST: &#x27;$&#123;DB_HOST&#125;&#x27;</span><br><span class=\"line\">      DB_REPLICA_HOST: &#x27;$&#123;DB_REPLICA_HOST&#125;&#x27;</span><br><span class=\"line\">      DB_PORT: &#x27;$&#123;DB_PORT&#125;&#x27;</span><br><span class=\"line\">      DB_DATABASE: &#x27;$&#123;DB_DATABASE&#125;&#x27;</span><br><span class=\"line\">      DB_USERNAME: &#x27;$&#123;DB_USERNAME&#125;&#x27;</span><br><span class=\"line\">      DB_PASSWORD: &#x27;$&#123;DB_PASSWORD&#125;&#x27;</span><br><span class=\"line\">      DB_DEBUG_LEVEL: &#x27;$&#123;DB_DEBUG_LEVEL&#125;&#x27;</span><br><span class=\"line\">      DB_MIGRATIONS_PATH: &#x27;$&#123;DB_MIGRATIONS_PATH&#125;&#x27;</span><br><span class=\"line\">      REDIS_URL: &#x27;$&#123;REDIS_URL&#125;&#x27;</span><br><span class=\"line\">      AUTH_JWT_SECRET: &#x27;$&#123;AUTH_JWT_SECRET&#125;&#x27;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - standardnotes_standalone</span><br><span class=\"line\"></span><br><span class=\"line\">  auth-worker:</span><br><span class=\"line\">    image: standardnotes/auth:1.11.0</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - auth</span><br><span class=\"line\">    entrypoint: [</span><br><span class=\"line\">      &quot;./wait-for.sh&quot;, &quot;auth&quot;, &quot;3000&quot;,</span><br><span class=\"line\">      &quot;./docker/entrypoint.sh&quot;, &quot;start-worker&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    env_file: docker/auth.env</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      PORT: 3000</span><br><span class=\"line\">      DB_HOST: &#x27;$&#123;DB_HOST&#125;&#x27;</span><br><span class=\"line\">      DB_REPLICA_HOST: &#x27;$&#123;DB_REPLICA_HOST&#125;&#x27;</span><br><span class=\"line\">      DB_PORT: &#x27;$&#123;DB_PORT&#125;&#x27;</span><br><span class=\"line\">      DB_DATABASE: &#x27;$&#123;DB_DATABASE&#125;&#x27;</span><br><span class=\"line\">      DB_USERNAME: &#x27;$&#123;DB_USERNAME&#125;&#x27;</span><br><span class=\"line\">      DB_PASSWORD: &#x27;$&#123;DB_PASSWORD&#125;&#x27;</span><br><span class=\"line\">      DB_DEBUG_LEVEL: &#x27;$&#123;DB_DEBUG_LEVEL&#125;&#x27;</span><br><span class=\"line\">      DB_MIGRATIONS_PATH: &#x27;$&#123;DB_MIGRATIONS_PATH&#125;&#x27;</span><br><span class=\"line\">      REDIS_URL: &#x27;$&#123;REDIS_URL&#125;&#x27;</span><br><span class=\"line\">      AUTH_JWT_SECRET: &#x27;$&#123;AUTH_JWT_SECRET&#125;&#x27;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - standardnotes_standalone</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  standardnotes_standalone:</span><br><span class=\"line\">    name: standardnotes_standalone</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Standard-notes\"><a href=\"#使用Standard-notes\" class=\"headerlink\" title=\"使用Standard notes\"></a>使用Standard notes</h3><p>当所有的部署步骤完成，并且配置好反向代理之后，就可以正式启用对应的服务了，使用步骤如下：</p>\n<ul>\n<li>打开 <a href=\"https://app.standardnotes.org/\">https://app.standardnotes.org/</a> 链接</li>\n<li>点击Account，然后点击注册，在高级配置里面配置上自己的服务域名</li>\n<li>填上自己的账号，然后就可以开始使用了</li>\n<li>初始情况下的编辑器是默认的官方编辑器，可以引入markdown编辑器，文档如下：<a href=\"https://yjk.im.sb/sn-markdown/\">https://yjk.im.sb/sn-markdown/</a></li>\n</ul>\n<h3 id=\"使用感受\"><a href=\"#使用感受\" class=\"headerlink\" title=\"使用感受\"></a>使用感受</h3><p>感觉使用起来很清爽，数据备份也很容易，备份出来的数据是我想要的样子，这样以后即使这个软件不可用了我还可以迁移到其他的服务中，也遇到了一些问题：</p>\n<ul>\n<li>断网情况下可能同步的不是特别及时，所以如果断网情况下编辑内容话尽量在客户端中进行，它支持各个终端的客户端，我一般是习惯网页型的</li>\n<li>如果不放心它们的官方网页，也可以进行自建，文档如下：<a href=\"https://github.com/standardnotes/web\">https://github.com/standardnotes/web</a><br>还有更多的可以自己定义的地方可以发掘。。。</li>\n</ul>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>我理想中的笔记本是随时拿来可用，我想记录一个东西的时候立刻能让我创建对应的文档并且进行记录，特别是一些零碎的内容，如果文档打开的过慢，或者操作很复杂，甚至能让我的灵感消失，所以我选用了这么一款部署起来比较折腾，但是使用起来却让我很喜欢的note app，<br>备份也是全量的很简单的text格式，如果有更好用的，欢迎给我推荐，如果想要联系我，也可以直接给我发邮件：<a href=\"mailto:&#115;&#111;&#x6e;&#103;&#x62;&#x6f;&#50;&#x30;&#50;&#x31;&#64;&#x6f;&#117;&#x74;&#x6c;&#111;&#111;&#x6b;&#x2e;&#99;&#111;&#x6d;\">&#115;&#111;&#x6e;&#103;&#x62;&#x6f;&#50;&#x30;&#50;&#x31;&#64;&#x6f;&#117;&#x74;&#x6c;&#111;&#111;&#x6b;&#x2e;&#99;&#111;&#x6d;</a>。</p>\n\n","more":"\n<h3 id=\"关于Standard-notes\"><a href=\"#关于Standard-notes\" class=\"headerlink\" title=\"关于Standard notes\"></a>关于Standard notes</h3><p><a href=\"https://standardnotes.com/\">Standard notes</a>是一款免费、开源且完全加密的笔记应用程序。</p>\n<p>简单介绍一些它的优点：</p>\n<ul>\n<li>开源 代码开源，可以自己创建对应的服务，将数据存储在自己的自建数据库中，这也是我最看重的一点</li>\n<li>免费 知识付费时代，有一些免费的可维护的项目也是很难得，该产品也是通过开源的形式，然后使用官方的服务队插件进行收费</li>\n<li>完全加密 按照文档的说法是完全的端到端加密，数据在浏览器进行接口传输之前就已经进行了加密，避免网络传输过程中被拦截后数据泄露的场景</li>\n</ul>\n<h3 id=\"部署Standard-notes\"><a href=\"#部署Standard-notes\" class=\"headerlink\" title=\"部署Standard notes\"></a>部署Standard notes</h3><p>Standard notes大部分语言是使用node写的，按照微服务的方式进行拆分，分为几大块：</p>\n<h4 id=\"服务层：\"><a href=\"#服务层：\" class=\"headerlink\" title=\"服务层：\"></a>服务层：</h4><ul>\n<li>同步服务器 业务逻辑的核心，负责对用户数据的所有操作。</li>\n<li>同步服务器 work 同步服务器 JS Worker 负责同步服务器 JS 可能为后台处理卸载的所有异步任务。这包括例如处理电子邮件备份、解决笔记重复问题、将笔记发送到扩展服务器等等。</li>\n<li>身份验证 该服务器负责所有授权和认证机制。身份验证是处理和处理所有与帐户相关的元数据的地方。</li>\n<li>身份验证 work Auth Worker 负责所有与认证和授权领域相关的异步任务例如，处理帐户删除请求和用户的注册后任务。</li>\n<li>API网关 这是整个架构的主要“入口点”。API 网关充当所有无法直接访问的服务的路由器和代理。<h4 id=\"数据层：\"><a href=\"#数据层：\" class=\"headerlink\" title=\"数据层：\"></a>数据层：</h4></li>\n<li>数据库 MySQL 数据库服务器。这是存储所有数据的地方。</li>\n<li>缓存 Redis 缓存节点，其中保留所有临时数据以进行性能优化和自动过期功能。在自托管模式下，Redis 默认用作服务与其work之间的通信队列。</li>\n</ul>\n<h4 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h4><p>我是使用的docker-compose 加上自己的公有云数据库和缓存进行部署的，官方给出的docker-compose文件可以参见:<a href=\"https://docs.standardnotes.org/self-hosting/docker/\">文档</a></p>\n<ul>\n<li>第一步：将<a href=\"https://github.com/standardnotes/standalone\">https://github.com/standardnotes/standalone</a> git仓库的内容clone或者下载下来放到服务器的对应目录</li>\n<li>第二步：进行对应的文件夹，然后执行：<code>./server.sh init</code></li>\n<li>第三步：编辑 .env文件配置自己的数据库以及对应的token，编辑docker文件内的api-gatewat.env文件和auth.env文件，修改对应的token</li>\n<li>第四步：当配置文件修改完成以后，执行<code>./server.sh start</code> 启动服务</li>\n<li>第五步：执行<code>./server.sh logs</code> 查看服务日志，如果出现问题根据对应的提示进行解决</li>\n<li>第六步：给api-gateway服务配置对应的代理，我是使用的nginx，用域名进行代理即可</li>\n</ul>\n<p>以上的所有步骤都可以在<a href=\"https://docs.standardnotes.org/self-hosting/docker/\">官方文档</a>中看到。</p>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><p>我的docker-compose根据官方的文件修改而来，使用的是自己的数据层，所以没有启动对应的数据库，如下，具体步骤可以参考以上文档。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &#x27;3.5&#x27;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  syncing-server-js:</span><br><span class=\"line\">    image: standardnotes/syncing-server-js:1.35.1</span><br><span class=\"line\">    entrypoint: [</span><br><span class=\"line\">      &quot;./docker/entrypoint.sh&quot;, &quot;start-web&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    env_file: .env</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      PORT: 3000</span><br><span class=\"line\">    restart: unless-stopped</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - standardnotes_standalone</span><br><span class=\"line\"></span><br><span class=\"line\">  syncing-server-js-worker:</span><br><span class=\"line\">    image: standardnotes/syncing-server-js:1.35.1</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - syncing-server-js</span><br><span class=\"line\">    entrypoint: [</span><br><span class=\"line\">      &quot;./wait-for.sh&quot;, &quot;syncing-server-js&quot;, &quot;3000&quot;,</span><br><span class=\"line\">       &quot;./docker/entrypoint.sh&quot;, &quot;start-worker&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    env_file: .env</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      PORT: 3000</span><br><span class=\"line\">    restart: unless-stopped</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - standardnotes_standalone</span><br><span class=\"line\"></span><br><span class=\"line\">  api-gateway:</span><br><span class=\"line\">    image: standardnotes/api-gateway:1.19.0</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - auth</span><br><span class=\"line\">      - syncing-server-js</span><br><span class=\"line\">    env_file: docker/api-gateway.env</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - $&#123;EXPOSED_PORT&#125;:3000</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      PORT: 3000</span><br><span class=\"line\">      AUTH_JWT_SECRET: &#x27;$&#123;AUTH_JWT_SECRET&#125;&#x27;</span><br><span class=\"line\">    entrypoint: [</span><br><span class=\"line\">      &quot;./wait-for.sh&quot;, &quot;auth&quot;, &quot;3000&quot;,</span><br><span class=\"line\">      &quot;./wait-for.sh&quot;, &quot;syncing-server-js&quot;, &quot;3000&quot;,</span><br><span class=\"line\">      &quot;./docker/entrypoint.sh&quot;, &quot;start-web&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - standardnotes_standalone</span><br><span class=\"line\"></span><br><span class=\"line\">  auth:</span><br><span class=\"line\">    image: standardnotes/auth:1.11.0</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - syncing-server-js</span><br><span class=\"line\">    entrypoint: [</span><br><span class=\"line\">      &quot;./wait-for.sh&quot;, &quot;syncing-server-js&quot;, &quot;3000&quot;,</span><br><span class=\"line\">      &quot;./docker/entrypoint.sh&quot;, &quot;start-web&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    env_file: docker/auth.env</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      PORT: 3000</span><br><span class=\"line\">      DB_HOST: &#x27;$&#123;DB_HOST&#125;&#x27;</span><br><span class=\"line\">      DB_REPLICA_HOST: &#x27;$&#123;DB_REPLICA_HOST&#125;&#x27;</span><br><span class=\"line\">      DB_PORT: &#x27;$&#123;DB_PORT&#125;&#x27;</span><br><span class=\"line\">      DB_DATABASE: &#x27;$&#123;DB_DATABASE&#125;&#x27;</span><br><span class=\"line\">      DB_USERNAME: &#x27;$&#123;DB_USERNAME&#125;&#x27;</span><br><span class=\"line\">      DB_PASSWORD: &#x27;$&#123;DB_PASSWORD&#125;&#x27;</span><br><span class=\"line\">      DB_DEBUG_LEVEL: &#x27;$&#123;DB_DEBUG_LEVEL&#125;&#x27;</span><br><span class=\"line\">      DB_MIGRATIONS_PATH: &#x27;$&#123;DB_MIGRATIONS_PATH&#125;&#x27;</span><br><span class=\"line\">      REDIS_URL: &#x27;$&#123;REDIS_URL&#125;&#x27;</span><br><span class=\"line\">      AUTH_JWT_SECRET: &#x27;$&#123;AUTH_JWT_SECRET&#125;&#x27;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - standardnotes_standalone</span><br><span class=\"line\"></span><br><span class=\"line\">  auth-worker:</span><br><span class=\"line\">    image: standardnotes/auth:1.11.0</span><br><span class=\"line\">    depends_on:</span><br><span class=\"line\">      - auth</span><br><span class=\"line\">    entrypoint: [</span><br><span class=\"line\">      &quot;./wait-for.sh&quot;, &quot;auth&quot;, &quot;3000&quot;,</span><br><span class=\"line\">      &quot;./docker/entrypoint.sh&quot;, &quot;start-worker&quot;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">    env_file: docker/auth.env</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      PORT: 3000</span><br><span class=\"line\">      DB_HOST: &#x27;$&#123;DB_HOST&#125;&#x27;</span><br><span class=\"line\">      DB_REPLICA_HOST: &#x27;$&#123;DB_REPLICA_HOST&#125;&#x27;</span><br><span class=\"line\">      DB_PORT: &#x27;$&#123;DB_PORT&#125;&#x27;</span><br><span class=\"line\">      DB_DATABASE: &#x27;$&#123;DB_DATABASE&#125;&#x27;</span><br><span class=\"line\">      DB_USERNAME: &#x27;$&#123;DB_USERNAME&#125;&#x27;</span><br><span class=\"line\">      DB_PASSWORD: &#x27;$&#123;DB_PASSWORD&#125;&#x27;</span><br><span class=\"line\">      DB_DEBUG_LEVEL: &#x27;$&#123;DB_DEBUG_LEVEL&#125;&#x27;</span><br><span class=\"line\">      DB_MIGRATIONS_PATH: &#x27;$&#123;DB_MIGRATIONS_PATH&#125;&#x27;</span><br><span class=\"line\">      REDIS_URL: &#x27;$&#123;REDIS_URL&#125;&#x27;</span><br><span class=\"line\">      AUTH_JWT_SECRET: &#x27;$&#123;AUTH_JWT_SECRET&#125;&#x27;</span><br><span class=\"line\">    networks:</span><br><span class=\"line\">      - standardnotes_standalone</span><br><span class=\"line\"></span><br><span class=\"line\">networks:</span><br><span class=\"line\">  standardnotes_standalone:</span><br><span class=\"line\">    name: standardnotes_standalone</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用Standard-notes\"><a href=\"#使用Standard-notes\" class=\"headerlink\" title=\"使用Standard notes\"></a>使用Standard notes</h3><p>当所有的部署步骤完成，并且配置好反向代理之后，就可以正式启用对应的服务了，使用步骤如下：</p>\n<ul>\n<li>打开 <a href=\"https://app.standardnotes.org/\">https://app.standardnotes.org/</a> 链接</li>\n<li>点击Account，然后点击注册，在高级配置里面配置上自己的服务域名</li>\n<li>填上自己的账号，然后就可以开始使用了</li>\n<li>初始情况下的编辑器是默认的官方编辑器，可以引入markdown编辑器，文档如下：<a href=\"https://yjk.im.sb/sn-markdown/\">https://yjk.im.sb/sn-markdown/</a></li>\n</ul>\n<h3 id=\"使用感受\"><a href=\"#使用感受\" class=\"headerlink\" title=\"使用感受\"></a>使用感受</h3><p>感觉使用起来很清爽，数据备份也很容易，备份出来的数据是我想要的样子，这样以后即使这个软件不可用了我还可以迁移到其他的服务中，也遇到了一些问题：</p>\n<ul>\n<li>断网情况下可能同步的不是特别及时，所以如果断网情况下编辑内容话尽量在客户端中进行，它支持各个终端的客户端，我一般是习惯网页型的</li>\n<li>如果不放心它们的官方网页，也可以进行自建，文档如下：<a href=\"https://github.com/standardnotes/web\">https://github.com/standardnotes/web</a><br>还有更多的可以自己定义的地方可以发掘。。。</li>\n</ul>\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>我理想中的笔记本是随时拿来可用，我想记录一个东西的时候立刻能让我创建对应的文档并且进行记录，特别是一些零碎的内容，如果文档打开的过慢，或者操作很复杂，甚至能让我的灵感消失，所以我选用了这么一款部署起来比较折腾，但是使用起来却让我很喜欢的note app，<br>备份也是全量的很简单的text格式，如果有更好用的，欢迎给我推荐，如果想要联系我，也可以直接给我发邮件：<a href=\"mailto:&#115;&#111;&#x6e;&#103;&#x62;&#x6f;&#50;&#x30;&#50;&#x31;&#64;&#x6f;&#117;&#x74;&#x6c;&#111;&#111;&#x6b;&#x2e;&#99;&#111;&#x6d;\">&#115;&#111;&#x6e;&#103;&#x62;&#x6f;&#50;&#x30;&#50;&#x31;&#64;&#x6f;&#117;&#x74;&#x6c;&#111;&#111;&#x6b;&#x2e;&#99;&#111;&#x6d;</a>。</p>\n\n","categories":[{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"},{"name":"Note","path":"api/tags/Note.json"}]}