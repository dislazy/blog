{"title":"go-web容器化中遇到的两个问题","slug":"go-web容器化中遇到的两个问题","date":"2021-07-18T15:53:43.000Z","updated":"2022-06-02T01:05:59.615Z","comments":true,"path":"api/articles/go-web容器化中遇到的两个问题.json","excerpt":"前言今年开始接触并且实践到Golang，近期自己写了一个相册的服务，是基于前后端分离的模式，由Go提供rest给web页面使用。在项目前期是直接使用的打包完成的二进制文件执行，在管理方面存在一些不方便的地方，所以周末抽时间将其容器化，实现自动化的部署方案，主要就是采用coding的devops流程，容器化使用的还是docker容器，使用的是alpine的镜像，在这个过程中遇到一些问题，下面会详细讲出，以此记录。","covers":null,"content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>今年开始接触并且实践到Golang，近期自己写了一个相册的服务，是基于前后端分离的模式，由Go提供rest给web页面使用。在项目前期是直接使用的打包完成的二进制文件执行，在管理方面存在一些不方便的地方，所以周末抽时间将其容器化，实现自动化的部署方案，主要就是采用coding的devops流程，容器化使用的还是docker容器，使用的是alpine的镜像，在这个过程中遇到一些问题，下面会详细讲出，以此记录。</p>\n<h3 id=\"docker容器化过程\"><a href=\"#docker容器化过程\" class=\"headerlink\" title=\"docker容器化过程\"></a>docker容器化过程</h3><p>将服务自动化发布流程还是比较简单的，分为以下几步：<br>1、github上创建对应的代码仓库，作为源代码的提交<br>2、在coding上新建一个项目，与github的代码库绑定（github同时也提供github action，也是非常好用的，但是我的服务器主机都在国内，所以涉及到一个跨境网络同步延时很高的问题）<br>3、在创建的项目中有个持续集成-构建计划，此时就是自己编写对应的jenkins文件，当代码有更新时，会自动hook到流程中，执行对应的build&#x2F;deploy过程<br>4、完成deploy过程后，检查对应容器的服务状态以及接口状态是否ok，整个自动化发布流程算是结束。</p>\n<h3 id=\"go-web在使用alpine过程中出现的问题\"><a href=\"#go-web在使用alpine过程中出现的问题\" class=\"headerlink\" title=\"go-web在使用alpine过程中出现的问题\"></a>go-web在使用alpine过程中出现的问题</h3><h4 id=\"Q1-and-A\"><a href=\"#Q1-and-A\" class=\"headerlink\" title=\"Q1 and A\"></a>Q1 and A</h4><p>在启动容器时，一直启动不成功，提示<code>standard_init_linux.go:211: exec user process caused &quot;no such file or directory&quot;</code>,这个问题查了一下google，发现是一个非常基本的问题，有很多的blog上都有这样的问题，<br>原因是由于go动态引用了特殊的包，在alpine的包中不存在的问题，详情可以<a href=\"https://stackoverflow.com/questions/52640304/standard-init-linux-go190-exec-user-process-caused-no-such-file-or-directory\">查看</a>,解决方案也很简单，在build时，加个参数即可：<br><code>-tags netgo</code>，打包时就用命令<code>GOARCH=amd64 go build  -tags netgo -o app</code>即可。</p>\n<h4 id=\"Q2-and-A\"><a href=\"#Q2-and-A\" class=\"headerlink\" title=\"Q2 and A\"></a>Q2 and A</h4><p>启动容器后，日志一切正常，但是访问接口无论如何也访问不通，当执行<code>curl localhost:8111</code>时，提示<code>curl: (56) Recv failure: Connection reset by peer</code>,此时查看容器的端口映射情况，也是正常映射的：<code>0.0.0.0:8111-&gt;8111/tcp, :::8111-&gt;8111/tcp</code>,<br>然后查看我的config配置，发现有一行是host的地址，我填的是<code>127.0.0.1</code>,然后将它修改为<code>0.0.0.0</code>后，外部服务正常可以访问，发现在容器内部<code>127.0.0.1</code>的地址可以直接访问通，当在宿主机进行访问时，即使端口映射是对的也是访问不通的，当改成<code>0.0.0.0</code>后，有端口映射的情况是可以访问通的，代表发布到外部访问</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>遇到的都是两个小问题，解决和查文档，思考的过程中也是很快的，在计算机的世界里很多都是相通的，所谓好记性不如烂笔头，所以将其记录。如果有更多想要交流的，欢迎联系我，可以直接给我发邮件：<a href=\"mailto:&#115;&#111;&#x6e;&#103;&#98;&#x6f;&#x32;&#x30;&#50;&#x31;&#64;&#111;&#x75;&#x74;&#108;&#x6f;&#111;&#x6b;&#x2e;&#99;&#111;&#x6d;\">&#115;&#111;&#x6e;&#103;&#98;&#x6f;&#x32;&#x30;&#50;&#x31;&#64;&#111;&#x75;&#x74;&#108;&#x6f;&#111;&#x6b;&#x2e;&#99;&#111;&#x6d;</a>。</p>\n\n","more":"\n<h3 id=\"docker容器化过程\"><a href=\"#docker容器化过程\" class=\"headerlink\" title=\"docker容器化过程\"></a>docker容器化过程</h3><p>将服务自动化发布流程还是比较简单的，分为以下几步：<br>1、github上创建对应的代码仓库，作为源代码的提交<br>2、在coding上新建一个项目，与github的代码库绑定（github同时也提供github action，也是非常好用的，但是我的服务器主机都在国内，所以涉及到一个跨境网络同步延时很高的问题）<br>3、在创建的项目中有个持续集成-构建计划，此时就是自己编写对应的jenkins文件，当代码有更新时，会自动hook到流程中，执行对应的build&#x2F;deploy过程<br>4、完成deploy过程后，检查对应容器的服务状态以及接口状态是否ok，整个自动化发布流程算是结束。</p>\n<h3 id=\"go-web在使用alpine过程中出现的问题\"><a href=\"#go-web在使用alpine过程中出现的问题\" class=\"headerlink\" title=\"go-web在使用alpine过程中出现的问题\"></a>go-web在使用alpine过程中出现的问题</h3><h4 id=\"Q1-and-A\"><a href=\"#Q1-and-A\" class=\"headerlink\" title=\"Q1 and A\"></a>Q1 and A</h4><p>在启动容器时，一直启动不成功，提示<code>standard_init_linux.go:211: exec user process caused &quot;no such file or directory&quot;</code>,这个问题查了一下google，发现是一个非常基本的问题，有很多的blog上都有这样的问题，<br>原因是由于go动态引用了特殊的包，在alpine的包中不存在的问题，详情可以<a href=\"https://stackoverflow.com/questions/52640304/standard-init-linux-go190-exec-user-process-caused-no-such-file-or-directory\">查看</a>,解决方案也很简单，在build时，加个参数即可：<br><code>-tags netgo</code>，打包时就用命令<code>GOARCH=amd64 go build  -tags netgo -o app</code>即可。</p>\n<h4 id=\"Q2-and-A\"><a href=\"#Q2-and-A\" class=\"headerlink\" title=\"Q2 and A\"></a>Q2 and A</h4><p>启动容器后，日志一切正常，但是访问接口无论如何也访问不通，当执行<code>curl localhost:8111</code>时，提示<code>curl: (56) Recv failure: Connection reset by peer</code>,此时查看容器的端口映射情况，也是正常映射的：<code>0.0.0.0:8111-&gt;8111/tcp, :::8111-&gt;8111/tcp</code>,<br>然后查看我的config配置，发现有一行是host的地址，我填的是<code>127.0.0.1</code>,然后将它修改为<code>0.0.0.0</code>后，外部服务正常可以访问，发现在容器内部<code>127.0.0.1</code>的地址可以直接访问通，当在宿主机进行访问时，即使端口映射是对的也是访问不通的，当改成<code>0.0.0.0</code>后，有端口映射的情况是可以访问通的，代表发布到外部访问</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>遇到的都是两个小问题，解决和查文档，思考的过程中也是很快的，在计算机的世界里很多都是相通的，所谓好记性不如烂笔头，所以将其记录。如果有更多想要交流的，欢迎联系我，可以直接给我发邮件：<a href=\"mailto:&#115;&#111;&#x6e;&#103;&#98;&#x6f;&#x32;&#x30;&#50;&#x31;&#64;&#111;&#x75;&#x74;&#108;&#x6f;&#111;&#x6b;&#x2e;&#99;&#111;&#x6d;\">&#115;&#111;&#x6e;&#103;&#98;&#x6f;&#x32;&#x30;&#50;&#x31;&#64;&#111;&#x75;&#x74;&#108;&#x6f;&#111;&#x6b;&#x2e;&#99;&#111;&#x6d;</a>。</p>\n\n","categories":[{"name":"Docker","path":"api/categories/Docker.json"}],"tags":[{"name":"Docker","path":"api/tags/Docker.json"},{"name":"Golang","path":"api/tags/Golang.json"}]}