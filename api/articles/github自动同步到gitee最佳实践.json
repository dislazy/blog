{"title":"github自动同步到gitee最佳实践","slug":"github自动同步到gitee最佳实践","date":"2022-04-05T02:28:16.000Z","updated":"2022-06-02T01:05:59.615Z","comments":true,"path":"api/articles/github自动同步到gitee最佳实践.json","excerpt":"前段时间对github同步到gitee并且实现自动化devops写了一篇简单版的文章，后期也遇到了很多问题，这篇文章主要解决遇到的痛点。痛点仓库数量多的情况下每个都需要配置，十分繁琐。如果统一配置在一个github action中时单个仓库提交无法被感知。github的私有仓库如果gitee没有则会被原来的github action创建为公有仓库，隐私信息容易被泄露。","covers":null,"content":"<blockquote>\n<p>前段时间对github同步到gitee并且实现自动化devops写了一篇简单版的文章，后期也遇到了很多问题，这篇文章主要解决遇到的痛点。</p>\n</blockquote>\n<div class=\"story post-story\"><h2 id=\"痛点\"><a href=\"#痛点\" class=\"headerlink\" title=\"痛点\"></a>痛点</h2><ol>\n<li>仓库数量多的情况下每个都需要配置，十分繁琐。</li>\n<li>如果统一配置在一个github action中时单个仓库提交无法被感知。</li>\n<li>github的私有仓库如果gitee没有则会被原来的github action创建为公有仓库，隐私信息容易被泄露。</li>\n</ol>\n</div><div class=\"story post-story\"><h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>遇到问题是正常的，我们需要思考如何去解决问题，也需要针对具体的问题去解决问题，如果可以一劳永逸当然是最好的，然而大多数情况下不能，只能一步一步的探索。</p>\n<h3 id=\"Q3解决方案\"><a href=\"#Q3解决方案\" class=\"headerlink\" title=\"Q3解决方案\"></a>Q3解决方案</h3><p>先从问题3开始解决，只需要去查看对应的api文档，看看有没有对应参数，查看了文档之后发现有，然后去分析对应的github action的代码然后fork到自己的账户下面，去改动对应的代码即可，我这边已经改动完了，提交到PR但是因为理念原因目前没有被merge，可以直接上github查看我的fix。</p>\n<ul>\n<li><a href=\"https://gitee.com/api/v5/swagger#/postV5UserRepos\">giteeApi文档</a></li>\n<li><a href=\"https://docs.github.com/en/rest/reference/repos#get-a-repository\">githubApi文档</a></li>\n<li><a href=\"https://github.com/dislazy/hub-mirror-action\">自行修改的创建私有仓库的pr</a></li>\n</ul>\n<h3 id=\"Q1和Q2解决方案\"><a href=\"#Q1和Q2解决方案\" class=\"headerlink\" title=\"Q1和Q2解决方案\"></a>Q1和Q2解决方案</h3><p>多个仓库配置和单个仓库配置其实是冲突但是又不冲突的，可以分开来实现，创建一个新的github仓库，然后专门来做这件事，这样就不用一个一个去进行繁琐的配置了。</p>\n<ol>\n<li><p>针对多个仓库的同步，这种同步实际上不需要实时，定时同步即可，这样可以用一个github action task去实现即可，以下是对应的解决方案代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定时同步多个仓库</span><br><span class=\"line\"></span><br><span class=\"line\">name: github2gitee</span><br><span class=\"line\"></span><br><span class=\"line\"># Controls when the workflow will run</span><br><span class=\"line\">on:</span><br><span class=\"line\">  # Triggers the workflow on push or pull request events but only for the main branch</span><br><span class=\"line\">  push:</span><br><span class=\"line\">  #  branches: [ main ]  注释代表全部分支、</span><br><span class=\"line\">  schedule:</span><br><span class=\"line\">    - cron: 0 */12 * * *</span><br><span class=\"line\"></span><br><span class=\"line\">  # Allows you to run this workflow manually from the Actions tab</span><br><span class=\"line\">  workflow_dispatch:</span><br><span class=\"line\"></span><br><span class=\"line\"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  repo-sync:</span><br><span class=\"line\">    env:</span><br><span class=\"line\">      dst_key: $&#123;&#123; secrets.GITEE_PRIVATE_KEY &#125;&#125;</span><br><span class=\"line\">      dst_token: $&#123;&#123; secrets.GITEE_TOKEN &#125;&#125;</span><br><span class=\"line\">      gitee_user: $&#123;&#123; secrets.GITEE_USER &#125;&#125;</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          persist-credentials: false</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Get Time</span><br><span class=\"line\">        id: get-time</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          echo &quot;::set-output name=date::$(/bin/date -u &quot;+%Y%m%d%H%M%S&quot;)&quot;</span><br><span class=\"line\">        shell: bash</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Cache src repos</span><br><span class=\"line\">        uses: actions/cache@v1</span><br><span class=\"line\">        id: cache</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          path: $&#123;&#123; github.workspace &#125;&#125;/github-cache</span><br><span class=\"line\">          key: $&#123;&#123; runner.os &#125;&#125;-hub-repos-cache-$&#123;&#123; steps.get-time.outputs.date &#125;&#125;</span><br><span class=\"line\">          restore-keys: $&#123;&#123; runner.os &#125;&#125;-hub-repos-cache</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: sync github -&gt; gitee</span><br><span class=\"line\">        uses: dislazy/hub-mirror-action@master</span><br><span class=\"line\">        if: env.dst_key &amp;&amp; env.dst_token &amp;&amp; env.gitee_user</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          # 必选，需要同步的 Github 用户（源）</span><br><span class=\"line\">          src: &#x27;github/$&#123;&#123; github.repository_owner &#125;&#125;&#x27;</span><br><span class=\"line\">          # 必选，需要同步到的 Gitee 用户（目的）</span><br><span class=\"line\">          dst: &#x27;gitee/$&#123;&#123; secrets.GITEE_USER &#125;&#125;&#x27;</span><br><span class=\"line\">          # 必选，Gitee公钥对应的私钥，https://gitee.com/profile/sshkeys</span><br><span class=\"line\">          dst_key: $&#123;&#123; secrets.GITEE_PRIVATE_KEY &#125;&#125;</span><br><span class=\"line\">          # 必选，Gitee对应的用于创建仓库的token，https://gitee.com/profile/personal_access_tokens</span><br><span class=\"line\">          dst_token:  $&#123;&#123; secrets.GITEE_TOKEN &#125;&#125;</span><br><span class=\"line\">          # 如果是组织，指定组织即可，默认为用户 user</span><br><span class=\"line\">          account_type: user</span><br><span class=\"line\">          # 需要同步的仓库列表</span><br><span class=\"line\">          static_list: &quot;repo-a,repo-b,repo-c&quot;</span><br><span class=\"line\">          #启用git push -f强制同步，注意：开启后，会强制覆盖目的端仓库。</span><br><span class=\"line\">          clone_style: ssh</span><br><span class=\"line\">          #默认为https，可以设置为ssh或者https。当设置为ssh时，你需要将dst_key所对应的公钥同时配置到源端和目的端</span><br><span class=\"line\">          force_update: true</span><br><span class=\"line\">          #配置cache</span><br><span class=\"line\">          cache_path: $&#123;&#123; github.workspace &#125;&#125;/github-cache</span><br><span class=\"line\">          #默认创建仓库为私有仓库</span><br><span class=\"line\">          dst_private: true</span><br><span class=\"line\">      - name: Print cache path</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          ls -la $&#123;&#123; github.workspace &#125;&#125;/github-cache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对单个仓库，因为需要进行及时进行后续的devops流程，所以针对它需要在push完之后进行同步。</p>\n</li>\n</ol>\n<p>我们去调研一下github的github action文档之后发现可以直接进行webhook触发，这个就可以直接帮助我们实现对应的实时同步过程。</p>\n<p>可以先行查看对应的 <a href=\"https://docs.github.com/cn/actions/using-workflows/events-that-trigger-workflows\">文档</a>。</p>\n<p>此时分为两步走，在此之前先创建一个github的token,<a href=\"https://github.com/settings/tokens/new\">点击</a> 申请一个 token，配置<code>repos</code>的所有权限即可，后面会用到。</p>\n<ul>\n<li>在上面的仓库里再创建一个单仓库的action，只不过这个触发方式是webhook事件(github_push这个自定义事件)触发此时同步的是<code>github.event.client_payload.repo</code> 这个参数的对应的仓库，它由wenhook传递过来，见代码：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This is a basic workflow to help you get started with Actions</span><br><span class=\"line\"></span><br><span class=\"line\">name: signle_repo_github2gitee</span><br><span class=\"line\"></span><br><span class=\"line\"># Controls when the workflow will run</span><br><span class=\"line\">on: </span><br><span class=\"line\"> repository_dispatch:</span><br><span class=\"line\">   types:</span><br><span class=\"line\">     - github_push</span><br><span class=\"line\"></span><br><span class=\"line\">  # Allows you to run this workflow manually from the Actions tab</span><br><span class=\"line\"> workflow_dispatch:</span><br><span class=\"line\"></span><br><span class=\"line\"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  repo-sync:</span><br><span class=\"line\">    env:</span><br><span class=\"line\">      dst_key: $&#123;&#123; secrets.GITEE_PRIVATE_KEY &#125;&#125;</span><br><span class=\"line\">      dst_token: $&#123;&#123; secrets.GITEE_TOKEN &#125;&#125;</span><br><span class=\"line\">      gitee_user: $&#123;&#123; secrets.GITEE_USER &#125;&#125;</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          persist-credentials: false</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: sync github -&gt; gitee</span><br><span class=\"line\">        uses: Yikun/hub-mirror-action@master</span><br><span class=\"line\">        if: env.dst_key &amp;&amp; env.dst_token &amp;&amp; env.gitee_user</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          # 必选，需要同步的 Github 用户（源）</span><br><span class=\"line\">          src: &#x27;github/$&#123;&#123; github.repository_owner &#125;&#125;&#x27;</span><br><span class=\"line\">          # 必选，需要同步到的 Gitee 用户（目的）</span><br><span class=\"line\">          dst: &#x27;gitee/$&#123;&#123; secrets.GITEE_USER &#125;&#125;&#x27;</span><br><span class=\"line\">          # 必选，Gitee公钥对应的私钥，https://gitee.com/profile/sshkeys</span><br><span class=\"line\">          dst_key: $&#123;&#123; secrets.GITEE_PRIVATE_KEY &#125;&#125;</span><br><span class=\"line\">          # 必选，Gitee对应的用于创建仓库的token，https://gitee.com/profile/personal_access_tokens</span><br><span class=\"line\">          dst_token:  $&#123;&#123; secrets.GITEE_TOKEN &#125;&#125;</span><br><span class=\"line\">          # 如果是组织，指定组织即可，默认为用户 user</span><br><span class=\"line\">          account_type: user</span><br><span class=\"line\">          # 直接取当前项目的仓库名</span><br><span class=\"line\">          static_list: $&#123;&#123; github.event.client_payload.repo &#125;&#125;</span><br><span class=\"line\">          #启用git push -f强制同步，注意：开启后，会强制覆盖目的端仓库。</span><br><span class=\"line\">          clone_style: ssh</span><br><span class=\"line\">          #默认为https，可以设置为ssh或者https。当设置为ssh时，你需要将dst_key所对应的公钥同时配置到源端和目的端</span><br><span class=\"line\">          force_update: true</span><br><span class=\"line\">          #配置cache</span><br><span class=\"line\">          cache_path: /github/workspace/$&#123;&#123; github.event.client_payload.repo &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<strong>你需要同步的仓库内</strong>创建一个webhook对应的action，如下：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This is a basic workflow to help you get started with Actions</span><br><span class=\"line\"></span><br><span class=\"line\">name: webhook</span><br><span class=\"line\"></span><br><span class=\"line\"># Controls when the workflow will run</span><br><span class=\"line\">on:</span><br><span class=\"line\">  # 注释代表所有分支</span><br><span class=\"line\">  push:</span><br><span class=\"line\">#     branches: [ main ]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Allows you to run this workflow manually from the Actions tab</span><br><span class=\"line\">  workflow_dispatch:</span><br><span class=\"line\">  </span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build:</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v3</span><br><span class=\"line\"></span><br><span class=\"line\">      # Runs a set of commands using the runners shell</span><br><span class=\"line\">      - name: Run a multi-line script</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">           curl \\</span><br><span class=\"line\">            -X POST \\</span><br><span class=\"line\">            -H &quot;Accept: application/vnd.github.v3+json&quot; \\</span><br><span class=\"line\">            -H &quot;Authorization: token &#123;&#123;githubToken&#125;&#125;&quot; \\</span><br><span class=\"line\">            https://api.github.com/repos/:owner/:repo/dispatches \\</span><br><span class=\"line\">            -d &#x27;&#123;&quot;event_type&quot;:&quot;github_push&quot;,&quot;client_payload&quot;:&#123;&quot;repo&quot;:&quot;$&#123;&#123; github.event.repository.name &#125;&#125;&quot;,&quot;message&quot;:&quot;github action sync&quot;&#125;&#125;&#x27;</span><br><span class=\"line\">           echo &#x27;success&#x27;</span><br></pre></td></tr></table></figure>\n<p>其中，owner 是你的用户名，替换即可，repo 是你上面创建仓库的仓库名， githubToken 是上面申请的 Token 凭证，前面的<code>token</code>单词要保留githubToken存到仓库的secrets中，然后将，event_type 是自定义的事件名字，client_payload是一个对象，它可以传递你需要传递的参数，我上面就传递了repo这个参数。</p>\n<p>然后提交代码到对应仓库，查看webhook是否发送成功，再校验webhook触发的task是否执行成功即可。</p>\n</div><div class=\"story post-story\"><h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>通过以上方案解决了多个仓库配置不便和单个仓库繁琐配置的问题，还有隐私安全的问题，大大节省了配置的时间和你花费的精力，如果针对上面的方案有疑问，欢迎与我多多交流。</p>\n\n</div>","more":"<div class=\"story post-story\"><h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>遇到问题是正常的，我们需要思考如何去解决问题，也需要针对具体的问题去解决问题，如果可以一劳永逸当然是最好的，然而大多数情况下不能，只能一步一步的探索。</p>\n<h3 id=\"Q3解决方案\"><a href=\"#Q3解决方案\" class=\"headerlink\" title=\"Q3解决方案\"></a>Q3解决方案</h3><p>先从问题3开始解决，只需要去查看对应的api文档，看看有没有对应参数，查看了文档之后发现有，然后去分析对应的github action的代码然后fork到自己的账户下面，去改动对应的代码即可，我这边已经改动完了，提交到PR但是因为理念原因目前没有被merge，可以直接上github查看我的fix。</p>\n<ul>\n<li><a href=\"https://gitee.com/api/v5/swagger#/postV5UserRepos\">giteeApi文档</a></li>\n<li><a href=\"https://docs.github.com/en/rest/reference/repos#get-a-repository\">githubApi文档</a></li>\n<li><a href=\"https://github.com/dislazy/hub-mirror-action\">自行修改的创建私有仓库的pr</a></li>\n</ul>\n<h3 id=\"Q1和Q2解决方案\"><a href=\"#Q1和Q2解决方案\" class=\"headerlink\" title=\"Q1和Q2解决方案\"></a>Q1和Q2解决方案</h3><p>多个仓库配置和单个仓库配置其实是冲突但是又不冲突的，可以分开来实现，创建一个新的github仓库，然后专门来做这件事，这样就不用一个一个去进行繁琐的配置了。</p>\n<ol>\n<li><p>针对多个仓库的同步，这种同步实际上不需要实时，定时同步即可，这样可以用一个github action task去实现即可，以下是对应的解决方案代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定时同步多个仓库</span><br><span class=\"line\"></span><br><span class=\"line\">name: github2gitee</span><br><span class=\"line\"></span><br><span class=\"line\"># Controls when the workflow will run</span><br><span class=\"line\">on:</span><br><span class=\"line\">  # Triggers the workflow on push or pull request events but only for the main branch</span><br><span class=\"line\">  push:</span><br><span class=\"line\">  #  branches: [ main ]  注释代表全部分支、</span><br><span class=\"line\">  schedule:</span><br><span class=\"line\">    - cron: 0 */12 * * *</span><br><span class=\"line\"></span><br><span class=\"line\">  # Allows you to run this workflow manually from the Actions tab</span><br><span class=\"line\">  workflow_dispatch:</span><br><span class=\"line\"></span><br><span class=\"line\"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  repo-sync:</span><br><span class=\"line\">    env:</span><br><span class=\"line\">      dst_key: $&#123;&#123; secrets.GITEE_PRIVATE_KEY &#125;&#125;</span><br><span class=\"line\">      dst_token: $&#123;&#123; secrets.GITEE_TOKEN &#125;&#125;</span><br><span class=\"line\">      gitee_user: $&#123;&#123; secrets.GITEE_USER &#125;&#125;</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          persist-credentials: false</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Get Time</span><br><span class=\"line\">        id: get-time</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          echo &quot;::set-output name=date::$(/bin/date -u &quot;+%Y%m%d%H%M%S&quot;)&quot;</span><br><span class=\"line\">        shell: bash</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Cache src repos</span><br><span class=\"line\">        uses: actions/cache@v1</span><br><span class=\"line\">        id: cache</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          path: $&#123;&#123; github.workspace &#125;&#125;/github-cache</span><br><span class=\"line\">          key: $&#123;&#123; runner.os &#125;&#125;-hub-repos-cache-$&#123;&#123; steps.get-time.outputs.date &#125;&#125;</span><br><span class=\"line\">          restore-keys: $&#123;&#123; runner.os &#125;&#125;-hub-repos-cache</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: sync github -&gt; gitee</span><br><span class=\"line\">        uses: dislazy/hub-mirror-action@master</span><br><span class=\"line\">        if: env.dst_key &amp;&amp; env.dst_token &amp;&amp; env.gitee_user</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          # 必选，需要同步的 Github 用户（源）</span><br><span class=\"line\">          src: &#x27;github/$&#123;&#123; github.repository_owner &#125;&#125;&#x27;</span><br><span class=\"line\">          # 必选，需要同步到的 Gitee 用户（目的）</span><br><span class=\"line\">          dst: &#x27;gitee/$&#123;&#123; secrets.GITEE_USER &#125;&#125;&#x27;</span><br><span class=\"line\">          # 必选，Gitee公钥对应的私钥，https://gitee.com/profile/sshkeys</span><br><span class=\"line\">          dst_key: $&#123;&#123; secrets.GITEE_PRIVATE_KEY &#125;&#125;</span><br><span class=\"line\">          # 必选，Gitee对应的用于创建仓库的token，https://gitee.com/profile/personal_access_tokens</span><br><span class=\"line\">          dst_token:  $&#123;&#123; secrets.GITEE_TOKEN &#125;&#125;</span><br><span class=\"line\">          # 如果是组织，指定组织即可，默认为用户 user</span><br><span class=\"line\">          account_type: user</span><br><span class=\"line\">          # 需要同步的仓库列表</span><br><span class=\"line\">          static_list: &quot;repo-a,repo-b,repo-c&quot;</span><br><span class=\"line\">          #启用git push -f强制同步，注意：开启后，会强制覆盖目的端仓库。</span><br><span class=\"line\">          clone_style: ssh</span><br><span class=\"line\">          #默认为https，可以设置为ssh或者https。当设置为ssh时，你需要将dst_key所对应的公钥同时配置到源端和目的端</span><br><span class=\"line\">          force_update: true</span><br><span class=\"line\">          #配置cache</span><br><span class=\"line\">          cache_path: $&#123;&#123; github.workspace &#125;&#125;/github-cache</span><br><span class=\"line\">          #默认创建仓库为私有仓库</span><br><span class=\"line\">          dst_private: true</span><br><span class=\"line\">      - name: Print cache path</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">          ls -la $&#123;&#123; github.workspace &#125;&#125;/github-cache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>针对单个仓库，因为需要进行及时进行后续的devops流程，所以针对它需要在push完之后进行同步。</p>\n</li>\n</ol>\n<p>我们去调研一下github的github action文档之后发现可以直接进行webhook触发，这个就可以直接帮助我们实现对应的实时同步过程。</p>\n<p>可以先行查看对应的 <a href=\"https://docs.github.com/cn/actions/using-workflows/events-that-trigger-workflows\">文档</a>。</p>\n<p>此时分为两步走，在此之前先创建一个github的token,<a href=\"https://github.com/settings/tokens/new\">点击</a> 申请一个 token，配置<code>repos</code>的所有权限即可，后面会用到。</p>\n<ul>\n<li>在上面的仓库里再创建一个单仓库的action，只不过这个触发方式是webhook事件(github_push这个自定义事件)触发此时同步的是<code>github.event.client_payload.repo</code> 这个参数的对应的仓库，它由wenhook传递过来，见代码：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This is a basic workflow to help you get started with Actions</span><br><span class=\"line\"></span><br><span class=\"line\">name: signle_repo_github2gitee</span><br><span class=\"line\"></span><br><span class=\"line\"># Controls when the workflow will run</span><br><span class=\"line\">on: </span><br><span class=\"line\"> repository_dispatch:</span><br><span class=\"line\">   types:</span><br><span class=\"line\">     - github_push</span><br><span class=\"line\"></span><br><span class=\"line\">  # Allows you to run this workflow manually from the Actions tab</span><br><span class=\"line\"> workflow_dispatch:</span><br><span class=\"line\"></span><br><span class=\"line\"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  repo-sync:</span><br><span class=\"line\">    env:</span><br><span class=\"line\">      dst_key: $&#123;&#123; secrets.GITEE_PRIVATE_KEY &#125;&#125;</span><br><span class=\"line\">      dst_token: $&#123;&#123; secrets.GITEE_TOKEN &#125;&#125;</span><br><span class=\"line\">      gitee_user: $&#123;&#123; secrets.GITEE_USER &#125;&#125;</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v2</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          persist-credentials: false</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: sync github -&gt; gitee</span><br><span class=\"line\">        uses: Yikun/hub-mirror-action@master</span><br><span class=\"line\">        if: env.dst_key &amp;&amp; env.dst_token &amp;&amp; env.gitee_user</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          # 必选，需要同步的 Github 用户（源）</span><br><span class=\"line\">          src: &#x27;github/$&#123;&#123; github.repository_owner &#125;&#125;&#x27;</span><br><span class=\"line\">          # 必选，需要同步到的 Gitee 用户（目的）</span><br><span class=\"line\">          dst: &#x27;gitee/$&#123;&#123; secrets.GITEE_USER &#125;&#125;&#x27;</span><br><span class=\"line\">          # 必选，Gitee公钥对应的私钥，https://gitee.com/profile/sshkeys</span><br><span class=\"line\">          dst_key: $&#123;&#123; secrets.GITEE_PRIVATE_KEY &#125;&#125;</span><br><span class=\"line\">          # 必选，Gitee对应的用于创建仓库的token，https://gitee.com/profile/personal_access_tokens</span><br><span class=\"line\">          dst_token:  $&#123;&#123; secrets.GITEE_TOKEN &#125;&#125;</span><br><span class=\"line\">          # 如果是组织，指定组织即可，默认为用户 user</span><br><span class=\"line\">          account_type: user</span><br><span class=\"line\">          # 直接取当前项目的仓库名</span><br><span class=\"line\">          static_list: $&#123;&#123; github.event.client_payload.repo &#125;&#125;</span><br><span class=\"line\">          #启用git push -f强制同步，注意：开启后，会强制覆盖目的端仓库。</span><br><span class=\"line\">          clone_style: ssh</span><br><span class=\"line\">          #默认为https，可以设置为ssh或者https。当设置为ssh时，你需要将dst_key所对应的公钥同时配置到源端和目的端</span><br><span class=\"line\">          force_update: true</span><br><span class=\"line\">          #配置cache</span><br><span class=\"line\">          cache_path: /github/workspace/$&#123;&#123; github.event.client_payload.repo &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在<strong>你需要同步的仓库内</strong>创建一个webhook对应的action，如下：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># This is a basic workflow to help you get started with Actions</span><br><span class=\"line\"></span><br><span class=\"line\">name: webhook</span><br><span class=\"line\"></span><br><span class=\"line\"># Controls when the workflow will run</span><br><span class=\"line\">on:</span><br><span class=\"line\">  # 注释代表所有分支</span><br><span class=\"line\">  push:</span><br><span class=\"line\">#     branches: [ main ]</span><br><span class=\"line\"></span><br><span class=\"line\">  # Allows you to run this workflow manually from the Actions tab</span><br><span class=\"line\">  workflow_dispatch:</span><br><span class=\"line\">  </span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build:</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - uses: actions/checkout@v3</span><br><span class=\"line\"></span><br><span class=\"line\">      # Runs a set of commands using the runners shell</span><br><span class=\"line\">      - name: Run a multi-line script</span><br><span class=\"line\">        run: |</span><br><span class=\"line\">           curl \\</span><br><span class=\"line\">            -X POST \\</span><br><span class=\"line\">            -H &quot;Accept: application/vnd.github.v3+json&quot; \\</span><br><span class=\"line\">            -H &quot;Authorization: token &#123;&#123;githubToken&#125;&#125;&quot; \\</span><br><span class=\"line\">            https://api.github.com/repos/:owner/:repo/dispatches \\</span><br><span class=\"line\">            -d &#x27;&#123;&quot;event_type&quot;:&quot;github_push&quot;,&quot;client_payload&quot;:&#123;&quot;repo&quot;:&quot;$&#123;&#123; github.event.repository.name &#125;&#125;&quot;,&quot;message&quot;:&quot;github action sync&quot;&#125;&#125;&#x27;</span><br><span class=\"line\">           echo &#x27;success&#x27;</span><br></pre></td></tr></table></figure>\n<p>其中，owner 是你的用户名，替换即可，repo 是你上面创建仓库的仓库名， githubToken 是上面申请的 Token 凭证，前面的<code>token</code>单词要保留githubToken存到仓库的secrets中，然后将，event_type 是自定义的事件名字，client_payload是一个对象，它可以传递你需要传递的参数，我上面就传递了repo这个参数。</p>\n<p>然后提交代码到对应仓库，查看webhook是否发送成功，再校验webhook触发的task是否执行成功即可。</p>\n</div><div class=\"story post-story\"><h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><p>通过以上方案解决了多个仓库配置不便和单个仓库繁琐配置的问题，还有隐私安全的问题，大大节省了配置的时间和你花费的精力，如果针对上面的方案有疑问，欢迎与我多多交流。</p>\n\n</div>","categories":[{"name":"Github","path":"api/categories/Github.json"}],"tags":[{"name":"git","path":"api/tags/git.json"}]}