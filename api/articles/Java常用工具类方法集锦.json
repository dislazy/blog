{"title":"Java常用工具类集锦","slug":"Java常用工具类方法集锦","date":"2019-01-05T14:41:13.000Z","updated":"2022-06-02T01:05:59.613Z","comments":true,"path":"api/articles/Java常用工具类方法集锦.json","excerpt":"NumberUtils工具类判断字符串是否是数字NumberUtils.isNumber(“5.96”);&#x2F;&#x2F;结果是trueNumberUtils.isNumber(“s5”);&#x2F;&#x2F;结果是falseNumberUtils.isNumber(“0000000000596”);&#x2F;&#x2F;结果是true判断字符串中是否全为数字NumberUtils.isDigits(“0000000000.596”);&#x2F;&#x2F;falseNumberUtils.isDigits(“0000000000596”);&#x2F;&#x2F;true字符串转换为整数NumberUtils.toInt(“5”);NumberUtils.toLong(“5”);NumberUtils.toByte(“3”);NumberUtils.toFloat(“3.2”);NumberUtils.toDouble(“4”);NumberUtils.toShort(“3”);找出最大的一个NumberUtils.max(newint[]{3,5,6});&#x2F;&#x2F;结果是6NumberUtils.max(3,1,7);&#x2F;&#x2F;结果是7找出最小的一个NumberUtils.min(newint[]{3,5,6});&#x2F;&#x2F;结果是6NumberUtils.min(3,1,7);&#x2F;&#x2F;结果是7通过字符串创建BigDecimal类型，支持long、int、float、double、number等数值NumberUtils.createBigDecimal(“1”);NumberUtils.createLong(“1”);NumberUtils.createInteger(“1”);ArrayUtils工具类判断数组是否为空, 不为空返回false, 为空trueArrayUtils.isEmpty(new String[]{“21”,”是”});&#x2F;&#x2F;结果是falseArrayUtils.isEmpty(new String[]{“”});&#x2F;&#x2F;结果是falseArrayUtils.isEmpty(new String[]{null});&#x2F;&#x2F;结果是falseArrayUtils.isEmpty(new String[]{});&#x2F;&#x2F;结果是true判断数组是否不为空,不为空返回true,为空falseArrayUtils.isNotEmpty(new String[]{“21”,”是”});&#x2F;&#x2F;结果是trueArrayUtils.isNotEmpty(new String[]{“”});&#x2F;&#x2F;结果是trueArrayUtils.isNotEmpty(new String[]{});&#x2F;&#x2F;结果是false判断两个数组长度是否相等,长度相等返回true,否则返回false。相比较的两个数组类型必须相同ArrayUtils.isSameLength(new String[]{“21”,”是”},new String[]{“21”,”是”});&#x2F;&#x2F;返回false判断两个数组的类型是否相同,相同返回true,否则返回falseArrayUtils.isSameType(new String[]{“21”,”是”},newInteger[]{3});判断两个数组是否相等ArrayUtils.isEquals(strs,strs);&#x2F;&#x2F;结果是true将一个数组转换成String,用于打印ArrayUtils.toString(new String[]{“21”,”是”});&#x2F;&#x2F;结果是：{21,是}赋值（克隆）数组Object[]s&#x3D;ArrayUtils.clone(newObject[]{“33”,”yy”});截取子数组：根据起始索引startIndexInclusive到结束索引startIndexInclusiveObject[]s1&#x3D;ArrayUtils.subarray(newObject[]{“33”,”yy”,”uu”},0,1);&#x2F;&#x2F;结果是返回数组：[33]Object[]s2&#x3D;ArrayUtils.subarray(newObject[]{“33”,”yy”,”uu”},0,2);&#x2F;&#x2F;结果是返回数组：[33,yy]查询某个object在数组中的位置，可是指定起始搜索位置intindex&#x3D;ArrayUtils.indexOf(newObject[]{“33”,”yy”,”uu”},”uu”);&#x2F;&#x2F;结果是2intindex1&#x3D;ArrayUtils.indexOf(newObject[]{“33”,”yy”,”uu”},”uu”,2);&#x2F;&#x2F;结果是2intindex3&#x3D;ArrayUtils.indexOf(newObject[]{“33”,”yy”,”uu”},”uu”,3);&#x2F;&#x2F;结果是-1反向查询某个object在数组中的位置，可以指定起始搜索位置intindex11&#x3D;ArrayUtils.lastIndexOf(newObject[]{“33”,”yy”,”uu”},”33”);&#x2F;&#x2F;结果是0intindex22&#x3D;ArrayUtils.lastIndexOf(newObject[]{“33”,”yy”,”uu”},”33”,2);查询某个object是否在数组中ArrayUtils.contains(new String[]{“1”, “2”, “3”}, “11”);反转数组ArrayUtils.reverse(new String[]{“22”,”yy”});&#x2F;&#x2F;结果是：{“yy”，”22”}添加一object到数组String[] t&#x3D;{“22”,”yy”};String[] gg&#x3D;(String[])ArrayUtils.add(t,”jj”);&#x2F;&#x2F;{“22”,”yy”,”jj”}合并两个数组String[]ggo&#x3D;(String[])ArrayUtils.addAll(new String[]{“22”,”yy”},new String[]{“jj”});&#x2F;&#x2F;结果是：[22,yy,jj]ArrayUtils.addAll(new String[]{“22”,”yy”},new String[]{“jj”, “jj”}); &#x2F;&#x2F;结果是：[22,yy,jj,jj]删除数组某个位置的元素String[]gg4&#x3D;(String[])ArrayUtils.remove(new String[]{“22”,”yy”},1);删除数组中某个对象String[]ggpp&#x3D;(String[])ArrayUtils.removeElement(new String[]{“22”,”yy”},”yy”);","covers":null,"content":"<div class=\"story post-story\"><h2 id=\"NumberUtils工具类\"><a href=\"#NumberUtils工具类\" class=\"headerlink\" title=\"NumberUtils工具类\"></a>NumberUtils工具类</h2><h3 id=\"判断字符串是否是数字\"><a href=\"#判断字符串是否是数字\" class=\"headerlink\" title=\"判断字符串是否是数字\"></a>判断字符串是否是数字</h3><p>NumberUtils.isNumber(“5.96”);&#x2F;&#x2F;结果是true</p>\n<p>NumberUtils.isNumber(“s5”);&#x2F;&#x2F;结果是false</p>\n<p>NumberUtils.isNumber(“0000000000596”);&#x2F;&#x2F;结果是true</p>\n<h3 id=\"判断字符串中是否全为数字\"><a href=\"#判断字符串中是否全为数字\" class=\"headerlink\" title=\"判断字符串中是否全为数字\"></a>判断字符串中是否全为数字</h3><p>NumberUtils.isDigits(“0000000000.596”);&#x2F;&#x2F;false</p>\n<p>NumberUtils.isDigits(“0000000000596”);&#x2F;&#x2F;true</p>\n<h3 id=\"字符串转换为整数\"><a href=\"#字符串转换为整数\" class=\"headerlink\" title=\"字符串转换为整数\"></a>字符串转换为整数</h3><p>NumberUtils.toInt(“5”);</p>\n<p>NumberUtils.toLong(“5”);</p>\n<p>NumberUtils.toByte(“3”);</p>\n<p>NumberUtils.toFloat(“3.2”);</p>\n<p>NumberUtils.toDouble(“4”);</p>\n<p>NumberUtils.toShort(“3”);</p>\n<h3 id=\"找出最大的一个\"><a href=\"#找出最大的一个\" class=\"headerlink\" title=\"找出最大的一个\"></a>找出最大的一个</h3><p>NumberUtils.max(newint[]{3,5,6});&#x2F;&#x2F;结果是6</p>\n<p>NumberUtils.max(3,1,7);&#x2F;&#x2F;结果是7</p>\n<h3 id=\"找出最小的一个\"><a href=\"#找出最小的一个\" class=\"headerlink\" title=\"找出最小的一个\"></a>找出最小的一个</h3><p>NumberUtils.min(newint[]{3,5,6});&#x2F;&#x2F;结果是6</p>\n<p>NumberUtils.min(3,1,7);&#x2F;&#x2F;结果是7</p>\n<h3 id=\"通过字符串创建BigDecimal类型，支持long、int、float、double、number等数值\"><a href=\"#通过字符串创建BigDecimal类型，支持long、int、float、double、number等数值\" class=\"headerlink\" title=\"通过字符串创建BigDecimal类型，支持long、int、float、double、number等数值\"></a>通过字符串创建BigDecimal类型，支持long、int、float、double、number等数值</h3><p>NumberUtils.createBigDecimal(“1”);</p>\n<p>NumberUtils.createLong(“1”);</p>\n<p>NumberUtils.createInteger(“1”);</p>\n</div><div class=\"story post-story\"><h2 id=\"ArrayUtils工具类\"><a href=\"#ArrayUtils工具类\" class=\"headerlink\" title=\"ArrayUtils工具类\"></a>ArrayUtils工具类</h2><h3 id=\"判断数组是否为空-不为空返回false-为空true\"><a href=\"#判断数组是否为空-不为空返回false-为空true\" class=\"headerlink\" title=\"判断数组是否为空, 不为空返回false, 为空true\"></a>判断数组是否为空, 不为空返回false, 为空true</h3><p>ArrayUtils.isEmpty(new String[]{“21”,”是”});&#x2F;&#x2F;结果是false</p>\n<p>ArrayUtils.isEmpty(new String[]{“”});&#x2F;&#x2F;结果是false</p>\n<p>ArrayUtils.isEmpty(new String[]{null});&#x2F;&#x2F;结果是false</p>\n<p>ArrayUtils.isEmpty(new String[]{});&#x2F;&#x2F;结果是true</p>\n<h3 id=\"判断数组是否不为空-不为空返回true-为空false\"><a href=\"#判断数组是否不为空-不为空返回true-为空false\" class=\"headerlink\" title=\"判断数组是否不为空,不为空返回true,为空false\"></a>判断数组是否不为空,不为空返回true,为空false</h3><p>ArrayUtils.isNotEmpty(new String[]{“21”,”是”});&#x2F;&#x2F;结果是true</p>\n<p>ArrayUtils.isNotEmpty(new String[]{“”});&#x2F;&#x2F;结果是true</p>\n<p>ArrayUtils.isNotEmpty(new String[]{});&#x2F;&#x2F;结果是false</p>\n<h3 id=\"判断两个数组长度是否相等-长度相等返回true-否则返回false。相比较的两个数组类型必须相同\"><a href=\"#判断两个数组长度是否相等-长度相等返回true-否则返回false。相比较的两个数组类型必须相同\" class=\"headerlink\" title=\"判断两个数组长度是否相等,长度相等返回true,否则返回false。相比较的两个数组类型必须相同\"></a>判断两个数组长度是否相等,长度相等返回true,否则返回false。相比较的两个数组类型必须相同</h3><p>ArrayUtils.isSameLength(new String[]{“21”,”是”},new String[]{“21”,”是”});&#x2F;&#x2F;返回false</p>\n<h3 id=\"判断两个数组的类型是否相同-相同返回true-否则返回false\"><a href=\"#判断两个数组的类型是否相同-相同返回true-否则返回false\" class=\"headerlink\" title=\"判断两个数组的类型是否相同,相同返回true,否则返回false\"></a>判断两个数组的类型是否相同,相同返回true,否则返回false</h3><p>ArrayUtils.isSameType(new String[]{“21”,”是”},newInteger[]{3});</p>\n<h3 id=\"判断两个数组是否相等\"><a href=\"#判断两个数组是否相等\" class=\"headerlink\" title=\"判断两个数组是否相等\"></a>判断两个数组是否相等</h3><p>ArrayUtils.isEquals(strs,strs);&#x2F;&#x2F;结果是true</p>\n<h3 id=\"将一个数组转换成String-用于打印\"><a href=\"#将一个数组转换成String-用于打印\" class=\"headerlink\" title=\"将一个数组转换成String,用于打印\"></a>将一个数组转换成String,用于打印</h3><p>ArrayUtils.toString(new String[]{“21”,”是”});&#x2F;&#x2F;结果是：{21,是}</p>\n<h3 id=\"赋值（克隆）数组\"><a href=\"#赋值（克隆）数组\" class=\"headerlink\" title=\"赋值（克隆）数组\"></a>赋值（克隆）数组</h3><p>Object[]s&#x3D;ArrayUtils.clone(newObject[]{“33”,”yy”});</p>\n<h3 id=\"截取子数组：根据起始索引startIndexInclusive到结束索引startIndexInclusive\"><a href=\"#截取子数组：根据起始索引startIndexInclusive到结束索引startIndexInclusive\" class=\"headerlink\" title=\"截取子数组：根据起始索引startIndexInclusive到结束索引startIndexInclusive\"></a>截取子数组：根据起始索引startIndexInclusive到结束索引startIndexInclusive</h3><p>Object[]s1&#x3D;ArrayUtils.subarray(newObject[]{“33”,”yy”,”uu”},0,1);&#x2F;&#x2F;结果是返回数组：[33]</p>\n<p>Object[]s2&#x3D;ArrayUtils.subarray(newObject[]{“33”,”yy”,”uu”},0,2);&#x2F;&#x2F;结果是返回数组：[33,yy]</p>\n<h3 id=\"查询某个object在数组中的位置，可是指定起始搜索位置\"><a href=\"#查询某个object在数组中的位置，可是指定起始搜索位置\" class=\"headerlink\" title=\"查询某个object在数组中的位置，可是指定起始搜索位置\"></a>查询某个object在数组中的位置，可是指定起始搜索位置</h3><p>intindex&#x3D;ArrayUtils.indexOf(newObject[]{“33”,”yy”,”uu”},”uu”);&#x2F;&#x2F;结果是2</p>\n<p>intindex1&#x3D;ArrayUtils.indexOf(newObject[]{“33”,”yy”,”uu”},”uu”,2);&#x2F;&#x2F;结果是2</p>\n<p>intindex3&#x3D;ArrayUtils.indexOf(newObject[]{“33”,”yy”,”uu”},”uu”,3);&#x2F;&#x2F;结果是-1</p>\n<h3 id=\"反向查询某个object在数组中的位置，可以指定起始搜索位置\"><a href=\"#反向查询某个object在数组中的位置，可以指定起始搜索位置\" class=\"headerlink\" title=\"反向查询某个object在数组中的位置，可以指定起始搜索位置\"></a>反向查询某个object在数组中的位置，可以指定起始搜索位置</h3><p>intindex11&#x3D;ArrayUtils.lastIndexOf(newObject[]{“33”,”yy”,”uu”},”33”);&#x2F;&#x2F;结果是0</p>\n<p>intindex22&#x3D;ArrayUtils.lastIndexOf(newObject[]{“33”,”yy”,”uu”},”33”,2);</p>\n<h3 id=\"查询某个object是否在数组中\"><a href=\"#查询某个object是否在数组中\" class=\"headerlink\" title=\"查询某个object是否在数组中\"></a>查询某个object是否在数组中</h3><p>ArrayUtils.contains(new String[]{“1”, “2”, “3”}, “11”);</p>\n<h3 id=\"反转数组\"><a href=\"#反转数组\" class=\"headerlink\" title=\"反转数组\"></a>反转数组</h3><p>ArrayUtils.reverse(new String[]{“22”,”yy”});&#x2F;&#x2F;结果是：{“yy”，”22”}</p>\n<h3 id=\"添加一object到数组\"><a href=\"#添加一object到数组\" class=\"headerlink\" title=\"添加一object到数组\"></a>添加一object到数组</h3><p>String[] t&#x3D;{“22”,”yy”};</p>\n<p>String[] gg&#x3D;(String[])ArrayUtils.add(t,”jj”);&#x2F;&#x2F;{“22”,”yy”,”jj”}</p>\n<h3 id=\"合并两个数组\"><a href=\"#合并两个数组\" class=\"headerlink\" title=\"合并两个数组\"></a>合并两个数组</h3><p>String[]ggo&#x3D;(String[])ArrayUtils.addAll(new String[]{“22”,”yy”},new String[]{“jj”});&#x2F;&#x2F;结果是：[22,yy,jj]</p>\n<p>ArrayUtils.addAll(new String[]{“22”,”yy”},new String[]{“jj”, “jj”}); &#x2F;&#x2F;结果是：[22,yy,jj,jj]</p>\n<h3 id=\"删除数组某个位置的元素\"><a href=\"#删除数组某个位置的元素\" class=\"headerlink\" title=\"删除数组某个位置的元素\"></a>删除数组某个位置的元素</h3><p>String[]gg4&#x3D;(String[])ArrayUtils.remove(new String[]{“22”,”yy”},1);</p>\n<h3 id=\"删除数组中某个对象\"><a href=\"#删除数组中某个对象\" class=\"headerlink\" title=\"删除数组中某个对象\"></a>删除数组中某个对象</h3><p>String[]ggpp&#x3D;(String[])ArrayUtils.removeElement(new String[]{“22”,”yy”},”yy”);</p>\n</div><div class=\"story post-story\"><h2 id=\"RandomUtils工具类\"><a href=\"#RandomUtils工具类\" class=\"headerlink\" title=\"RandomUtils工具类\"></a>RandomUtils工具类</h2><p>RandomUtils帮助我们产生随机数，不止是数字类型，连boolean类型都可以通过RandomUtils产生，RandomStringUtils生成字符随机数。</p>\n<p>RandomUtils.nextBoolean();</p>\n<p>RandomUtils.nextDouble();</p>\n<p>RandomUtils.nextLong();</p>\n<p>&#x2F;&#x2F; 注意这里传入的参数不是随机种子,而是在0~1000之间产生一位随机数</p>\n<p>RandomUtils.nextInt(1000);</p>\n</div><div class=\"story post-story\"><h2 id=\"StringUtils工具类\"><a href=\"#StringUtils工具类\" class=\"headerlink\" title=\"StringUtils工具类\"></a>StringUtils工具类</h2><h3 id=\"空字符串检查\"><a href=\"#空字符串检查\" class=\"headerlink\" title=\"空字符串检查\"></a>空字符串检查</h3><p>StringUtils.isEmpty(String str);&#x2F;&#x2F;当为”“或者null时都为true</p>\n<p>StringUtils.isNotEmpty(String str); &#x2F;&#x2F;当为”“或者null时都为false</p>\n<p>StringUtils.isBlank(String str);&#x2F;&#x2F;当为”“或者null时都为true</p>\n<p>StringUtils.isNotBlank(String str);&#x2F;&#x2F;当为”“或者null时都为false</p>\n<h3 id=\"清除空白字符\"><a href=\"#清除空白字符\" class=\"headerlink\" title=\"清除空白字符\"></a>清除空白字符</h3><p>StringUtils.trimToNull(str)； &#x2F;&#x2F;清除掉str首尾的空白字符,如果仅str全由空白字符组成则返回null;函数StringUtils.trim(str)与StringUtils.trimToNull(str)功能类似，但str由空白字符 组成时返回零长度字符串。</p>\n<h3 id=\"查找嵌套字符串\"><a href=\"#查找嵌套字符串\" class=\"headerlink\" title=\"查找嵌套字符串\"></a>查找嵌套字符串</h3><p>StringUtils.substringBetween(str,header,tail); &#x2F;&#x2F;在str中取得header和tail之间的字符串。不存在则返回空.</p>\n<h3 id=\"取得字符串的缩写\"><a href=\"#取得字符串的缩写\" class=\"headerlink\" title=\"取得字符串的缩写\"></a>取得字符串的缩写</h3><p>StringUtils.abbreviate(str,width); </p>\n<p>StringUtils.abbreviate(str,offset，width); &#x2F;&#x2F; 在给定的width内取得str的缩写,当testString的长度小于width(大于等于4)则返回原字符串. </p>\n<h3 id=\"去除尾部换行符\"><a href=\"#去除尾部换行符\" class=\"headerlink\" title=\"去除尾部换行符\"></a>去除尾部换行符</h3><p>StringUtils.chomp(str) &#x2F;&#x2F;去除str尾部的换行符\\n</p>\n<h3 id=\"重复字符串\"><a href=\"#重复字符串\" class=\"headerlink\" title=\"重复字符串\"></a>重复字符串</h3><p>StringUtils.repeat(str,count)  &#x2F;&#x2F;得到将str重复count次后的字符串</p>\n<p>StringUtils.center( str, count,repeatString ); &#x2F;&#x2F;把str插入将repeatString重复多次后的字符串中间,得到字符串的总长为count</p>\n<h3 id=\"颠倒字符串\"><a href=\"#颠倒字符串\" class=\"headerlink\" title=\"颠倒字符串\"></a>颠倒字符串</h3><p>StringUtils.reverse(str) &#x2F;&#x2F;得到str中字符颠倒后的字符串</p>\n<h3 id=\"判断字符串内容的类型\"><a href=\"#判断字符串内容的类型\" class=\"headerlink\" title=\"判断字符串内容的类型\"></a>判断字符串内容的类型</h3><p>StringUtils.isNumeric( str); &#x2F;&#x2F;如果str全由数字组成返回True.</p>\n<p>StringUtils.isAlpha( str); &#x2F;&#x2F;如果str全由字母组成返回True.</p>\n<p>StringUtils.isAlphanumeric( str); &#x2F;&#x2F;如果str全由数字或数字组成返回True.</p>\n<p>StringUtils.isAlphaspace( str); &#x2F;&#x2F;如果str全由字母或空格组成返回True.</p>\n<p>StringUtils.isAlphanumericSpace(String str); &#x2F;&#x2F;只由字母数字和空格组成</p>\n<p>StringUtils.isNumericSpace(String str); &#x2F;&#x2F;只由数字和空格组成</p>\n<h3 id=\"取得某字符串在另一字符串中出现的次数\"><a href=\"#取得某字符串在另一字符串中出现的次数\" class=\"headerlink\" title=\"取得某字符串在另一字符串中出现的次数\"></a>取得某字符串在另一字符串中出现的次数</h3><p>StringUtils.countMatches(str,seqString); &#x2F;&#x2F;取得seqString在str中出现的次数,未发现则返回零</p>\n<h3 id=\"部分截取字符串\"><a href=\"#部分截取字符串\" class=\"headerlink\" title=\"部分截取字符串\"></a>部分截取字符串</h3><p>StringUtils.substringBetween(testString,fromString,toString ): &#x2F;&#x2F;取得两字符之间的字符串</p>\n<p>StringUtils.substringAfter(str,seqStr ): &#x2F;&#x2F;取得指定字符串后的字符串</p>\n<p>StringUtils.substringBefore(str,seqStr )： &#x2F;&#x2F;取得指定字符串之前的字符串</p>\n<p>StringUtils.substringBeforeLast( str,seqStr )： &#x2F;&#x2F;取得最后一个指定字符串之前的字符串</p>\n<p>StringUtils.substringAfterLast(str,seqStr )： &#x2F;&#x2F;取得最后一个指定字符串之后的字符串</p>\n<h3 id=\"首字母大写\"><a href=\"#首字母大写\" class=\"headerlink\" title=\"首字母大写\"></a>首字母大写</h3><p>StringUtils.capitalize(String str); &#x2F;&#x2F;首字母大写 </p>\n<p>StringUtils.uncapitalize(String str);&#x2F;&#x2F;首字母小写</p>\n<h3 id=\"是否全是大写，是否全是小写\"><a href=\"#是否全是大写，是否全是小写\" class=\"headerlink\" title=\"是否全是大写，是否全是小写\"></a>是否全是大写，是否全是小写</h3><p>StringUtils.isAllUpperCase(String str); </p>\n<p>StringUtils.isAllLowerCase(String str);</p>\n<h3 id=\"大小写转换，空格不动\"><a href=\"#大小写转换，空格不动\" class=\"headerlink\" title=\"大小写转换，空格不动\"></a>大小写转换，空格不动</h3><p>StringUtils.swapCase(String str);</p>\n\n</div>","more":"<div class=\"story post-story\"><h2 id=\"RandomUtils工具类\"><a href=\"#RandomUtils工具类\" class=\"headerlink\" title=\"RandomUtils工具类\"></a>RandomUtils工具类</h2><p>RandomUtils帮助我们产生随机数，不止是数字类型，连boolean类型都可以通过RandomUtils产生，RandomStringUtils生成字符随机数。</p>\n<p>RandomUtils.nextBoolean();</p>\n<p>RandomUtils.nextDouble();</p>\n<p>RandomUtils.nextLong();</p>\n<p>&#x2F;&#x2F; 注意这里传入的参数不是随机种子,而是在0~1000之间产生一位随机数</p>\n<p>RandomUtils.nextInt(1000);</p>\n</div><div class=\"story post-story\"><h2 id=\"StringUtils工具类\"><a href=\"#StringUtils工具类\" class=\"headerlink\" title=\"StringUtils工具类\"></a>StringUtils工具类</h2><h3 id=\"空字符串检查\"><a href=\"#空字符串检查\" class=\"headerlink\" title=\"空字符串检查\"></a>空字符串检查</h3><p>StringUtils.isEmpty(String str);&#x2F;&#x2F;当为”“或者null时都为true</p>\n<p>StringUtils.isNotEmpty(String str); &#x2F;&#x2F;当为”“或者null时都为false</p>\n<p>StringUtils.isBlank(String str);&#x2F;&#x2F;当为”“或者null时都为true</p>\n<p>StringUtils.isNotBlank(String str);&#x2F;&#x2F;当为”“或者null时都为false</p>\n<h3 id=\"清除空白字符\"><a href=\"#清除空白字符\" class=\"headerlink\" title=\"清除空白字符\"></a>清除空白字符</h3><p>StringUtils.trimToNull(str)； &#x2F;&#x2F;清除掉str首尾的空白字符,如果仅str全由空白字符组成则返回null;函数StringUtils.trim(str)与StringUtils.trimToNull(str)功能类似，但str由空白字符 组成时返回零长度字符串。</p>\n<h3 id=\"查找嵌套字符串\"><a href=\"#查找嵌套字符串\" class=\"headerlink\" title=\"查找嵌套字符串\"></a>查找嵌套字符串</h3><p>StringUtils.substringBetween(str,header,tail); &#x2F;&#x2F;在str中取得header和tail之间的字符串。不存在则返回空.</p>\n<h3 id=\"取得字符串的缩写\"><a href=\"#取得字符串的缩写\" class=\"headerlink\" title=\"取得字符串的缩写\"></a>取得字符串的缩写</h3><p>StringUtils.abbreviate(str,width); </p>\n<p>StringUtils.abbreviate(str,offset，width); &#x2F;&#x2F; 在给定的width内取得str的缩写,当testString的长度小于width(大于等于4)则返回原字符串. </p>\n<h3 id=\"去除尾部换行符\"><a href=\"#去除尾部换行符\" class=\"headerlink\" title=\"去除尾部换行符\"></a>去除尾部换行符</h3><p>StringUtils.chomp(str) &#x2F;&#x2F;去除str尾部的换行符\\n</p>\n<h3 id=\"重复字符串\"><a href=\"#重复字符串\" class=\"headerlink\" title=\"重复字符串\"></a>重复字符串</h3><p>StringUtils.repeat(str,count)  &#x2F;&#x2F;得到将str重复count次后的字符串</p>\n<p>StringUtils.center( str, count,repeatString ); &#x2F;&#x2F;把str插入将repeatString重复多次后的字符串中间,得到字符串的总长为count</p>\n<h3 id=\"颠倒字符串\"><a href=\"#颠倒字符串\" class=\"headerlink\" title=\"颠倒字符串\"></a>颠倒字符串</h3><p>StringUtils.reverse(str) &#x2F;&#x2F;得到str中字符颠倒后的字符串</p>\n<h3 id=\"判断字符串内容的类型\"><a href=\"#判断字符串内容的类型\" class=\"headerlink\" title=\"判断字符串内容的类型\"></a>判断字符串内容的类型</h3><p>StringUtils.isNumeric( str); &#x2F;&#x2F;如果str全由数字组成返回True.</p>\n<p>StringUtils.isAlpha( str); &#x2F;&#x2F;如果str全由字母组成返回True.</p>\n<p>StringUtils.isAlphanumeric( str); &#x2F;&#x2F;如果str全由数字或数字组成返回True.</p>\n<p>StringUtils.isAlphaspace( str); &#x2F;&#x2F;如果str全由字母或空格组成返回True.</p>\n<p>StringUtils.isAlphanumericSpace(String str); &#x2F;&#x2F;只由字母数字和空格组成</p>\n<p>StringUtils.isNumericSpace(String str); &#x2F;&#x2F;只由数字和空格组成</p>\n<h3 id=\"取得某字符串在另一字符串中出现的次数\"><a href=\"#取得某字符串在另一字符串中出现的次数\" class=\"headerlink\" title=\"取得某字符串在另一字符串中出现的次数\"></a>取得某字符串在另一字符串中出现的次数</h3><p>StringUtils.countMatches(str,seqString); &#x2F;&#x2F;取得seqString在str中出现的次数,未发现则返回零</p>\n<h3 id=\"部分截取字符串\"><a href=\"#部分截取字符串\" class=\"headerlink\" title=\"部分截取字符串\"></a>部分截取字符串</h3><p>StringUtils.substringBetween(testString,fromString,toString ): &#x2F;&#x2F;取得两字符之间的字符串</p>\n<p>StringUtils.substringAfter(str,seqStr ): &#x2F;&#x2F;取得指定字符串后的字符串</p>\n<p>StringUtils.substringBefore(str,seqStr )： &#x2F;&#x2F;取得指定字符串之前的字符串</p>\n<p>StringUtils.substringBeforeLast( str,seqStr )： &#x2F;&#x2F;取得最后一个指定字符串之前的字符串</p>\n<p>StringUtils.substringAfterLast(str,seqStr )： &#x2F;&#x2F;取得最后一个指定字符串之后的字符串</p>\n<h3 id=\"首字母大写\"><a href=\"#首字母大写\" class=\"headerlink\" title=\"首字母大写\"></a>首字母大写</h3><p>StringUtils.capitalize(String str); &#x2F;&#x2F;首字母大写 </p>\n<p>StringUtils.uncapitalize(String str);&#x2F;&#x2F;首字母小写</p>\n<h3 id=\"是否全是大写，是否全是小写\"><a href=\"#是否全是大写，是否全是小写\" class=\"headerlink\" title=\"是否全是大写，是否全是小写\"></a>是否全是大写，是否全是小写</h3><p>StringUtils.isAllUpperCase(String str); </p>\n<p>StringUtils.isAllLowerCase(String str);</p>\n<h3 id=\"大小写转换，空格不动\"><a href=\"#大小写转换，空格不动\" class=\"headerlink\" title=\"大小写转换，空格不动\"></a>大小写转换，空格不动</h3><p>StringUtils.swapCase(String str);</p>\n\n</div>","categories":[{"name":"Java","path":"api/categories/Java.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"}]}