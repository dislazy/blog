{"title":"MySQL特殊字段类型选择","slug":"MySQL特殊字段类型选择","date":"2018-10-10T07:39:28.000Z","updated":"2022-06-02T01:05:59.614Z","comments":true,"path":"api/articles/MySQL特殊字段类型选择.json","excerpt":null,"covers":null,"content":"<div class=\"story post-story\"><h2 id=\"金额字段类型选择\"><a href=\"#金额字段类型选择\" class=\"headerlink\" title=\"金额字段类型选择\"></a>金额字段类型选择</h2><h3 id=\"1-decimal\"><a href=\"#1-decimal\" class=\"headerlink\" title=\"1.decimal\"></a>1.decimal</h3><p><code>decimal(M,N)   0&lt;M&lt;65,0&lt;N&lt;30,且N&lt;M,M和N的长度直接影响存储空间</code></p>\n<p>默认情况，表示金额的情况，decimal(16,2),范围是99,999,999,999,999.99 to -99,999,999,999,999.99</p>\n<p>占用空间为8个字节</p>\n<p>存储时会四舍五入</p>\n<h3 id=\"2-bigint\"><a href=\"#2-bigint\" class=\"headerlink\" title=\"2.bigint\"></a>2.bigint</h3><p>占用空间为8个字节</p>\n<p>存储相同大写的数字是，decimal比bigint多1个字节</p>\n<p>存入数据库时，decimal会做四舍五入</p>\n<p>create table ta (a decimal(4,2),b int); </p>\n<p>insert into ta (a,b) values(99.006,9900);</p>\n<p>select * from ta;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------+------+</span><br><span class=\"line\"></span><br><span class=\"line\">| a     | b    |</span><br><span class=\"line\"></span><br><span class=\"line\">+-------+------+</span><br><span class=\"line\"></span><br><span class=\"line\">| 99.01 | 9900 |</span><br><span class=\"line\"></span><br><span class=\"line\">+-------+------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>1.decimal&amp;bigtin在做计算时，都不会丢失精度（float&amp;double在极端情况下会丢失精度），但是在存入mysql数据库时，decimal会做四舍五入，而int不存在这种情况。</p>\n<p>2.金额字段使用decimal类型时，默认单位为元，比较直观，没有歧义</p>\n<p>3.金额字段使用bigint时，需要特殊说明单位为分，程序处理时，可以直接使用整数类型long，较通用</p>\n<p>4.存储相关大小的金额时（bigint以分为单位），decimal占用空间比bigint微大</p>\n<p>综上所诉：建议用bigint来存储金额</p>\n</div><div class=\"story post-story\"><h2 id=\"时间字段类型选择\"><a href=\"#时间字段类型选择\" class=\"headerlink\" title=\"时间字段类型选择\"></a>时间字段类型选择</h2><h3 id=\"1-timestamp\"><a href=\"#1-timestamp\" class=\"headerlink\" title=\"1.timestamp\"></a>1.timestamp</h3><p>占用4个字节</p>\n<p>时区转化 ，存储时对当前的时区进行转换，检索时再转换回当前的时区，对于跨时区跨机房的主从同步有影响</p>\n<p>默认值为CURRENT_TIMESTAMP()，其实也就是当前的系统时间</p>\n<p>timestamp容易受mysql sqlmode，timezone参数影响，局限性大</p>\n<p>支持范围1970-01-01 08:00:01 ~ 2038-01-19 11:14:07</p>\n<p>不推荐使用</p>\n<h3 id=\"2-bigint-1\"><a href=\"#2-bigint-1\" class=\"headerlink\" title=\"2.bigint\"></a>2.bigint</h3><p>占用8个字节</p>\n<p>与时区有关，通过System.currentTimeMillis()获取</p>\n<p>建立索引之后，查询速度快，条件范围搜索可以使用使用between</p>\n<p>支持范围1970-01-01 08:00:01 ~ 2038-01-19 11:14:07 支持精确到毫秒级别</p>\n<p>PS: 适合需要进行大量时间范围查询的数据表</p>\n<h3 id=\"3-datetime\"><a href=\"#3-datetime\" class=\"headerlink\" title=\"3.datetime\"></a>3.datetime</h3><p>占用8个字节</p>\n<p>允许为空值，可以自定义值，系统不会自动修改其值</p>\n<p>与时区无关</p>\n<p>不可以设定默认值，所以在不允许为空值的情况下，必须手动指定datetime字段的值才可以成功插入数据</p>\n<p>可以在指定datetime字段的值的时候使用now()变量来自动插入系统的当前时间</p>\n<p>支持范围：1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</p>\n<h3 id=\"总结：-1\"><a href=\"#总结：-1\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>1.性能：bigint性能最高，如果程序有通过时间排序的场景，优势巨大</p>\n<p>2.通用性：bigint不受平台限制，所有系统都能通用，不会对后期的升级迁移造成困扰</p>\n<p>3.精度：bigint能够精确到毫秒级别，对于高并发，高精度查询，帮助大</p>\n<p>4.可读性：bigint不如datetime,开发成本大</p>\n\n</div>","more":"<h2 id=\"金额字段类型选择\"><a href=\"#金额字段类型选择\" class=\"headerlink\" title=\"金额字段类型选择\"></a>金额字段类型选择</h2><h3 id=\"1-decimal\"><a href=\"#1-decimal\" class=\"headerlink\" title=\"1.decimal\"></a>1.decimal</h3><p><code>decimal(M,N)   0&lt;M&lt;65,0&lt;N&lt;30,且N&lt;M,M和N的长度直接影响存储空间</code></p>\n<p>默认情况，表示金额的情况，decimal(16,2),范围是99,999,999,999,999.99 to -99,999,999,999,999.99</p>\n<p>占用空间为8个字节</p>\n<p>存储时会四舍五入</p>\n<h3 id=\"2-bigint\"><a href=\"#2-bigint\" class=\"headerlink\" title=\"2.bigint\"></a>2.bigint</h3><p>占用空间为8个字节</p>\n<p>存储相同大写的数字是，decimal比bigint多1个字节</p>\n<p>存入数据库时，decimal会做四舍五入</p>\n<p>create table ta (a decimal(4,2),b int); </p>\n<p>insert into ta (a,b) values(99.006,9900);</p>\n<p>select * from ta;</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------+------+</span><br><span class=\"line\"></span><br><span class=\"line\">| a     | b    |</span><br><span class=\"line\"></span><br><span class=\"line\">+-------+------+</span><br><span class=\"line\"></span><br><span class=\"line\">| 99.01 | 9900 |</span><br><span class=\"line\"></span><br><span class=\"line\">+-------+------+</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>1.decimal&amp;bigtin在做计算时，都不会丢失精度（float&amp;double在极端情况下会丢失精度），但是在存入mysql数据库时，decimal会做四舍五入，而int不存在这种情况。</p>\n<p>2.金额字段使用decimal类型时，默认单位为元，比较直观，没有歧义</p>\n<p>3.金额字段使用bigint时，需要特殊说明单位为分，程序处理时，可以直接使用整数类型long，较通用</p>\n<p>4.存储相关大小的金额时（bigint以分为单位），decimal占用空间比bigint微大</p>\n<p>综上所诉：建议用bigint来存储金额</p>\n<h2 id=\"时间字段类型选择\"><a href=\"#时间字段类型选择\" class=\"headerlink\" title=\"时间字段类型选择\"></a>时间字段类型选择</h2><h3 id=\"1-timestamp\"><a href=\"#1-timestamp\" class=\"headerlink\" title=\"1.timestamp\"></a>1.timestamp</h3><p>占用4个字节</p>\n<p>时区转化 ，存储时对当前的时区进行转换，检索时再转换回当前的时区，对于跨时区跨机房的主从同步有影响</p>\n<p>默认值为CURRENT_TIMESTAMP()，其实也就是当前的系统时间</p>\n<p>timestamp容易受mysql sqlmode，timezone参数影响，局限性大</p>\n<p>支持范围1970-01-01 08:00:01 ~ 2038-01-19 11:14:07</p>\n<p>不推荐使用</p>\n<h3 id=\"2-bigint-1\"><a href=\"#2-bigint-1\" class=\"headerlink\" title=\"2.bigint\"></a>2.bigint</h3><p>占用8个字节</p>\n<p>与时区有关，通过System.currentTimeMillis()获取</p>\n<p>建立索引之后，查询速度快，条件范围搜索可以使用使用between</p>\n<p>支持范围1970-01-01 08:00:01 ~ 2038-01-19 11:14:07 支持精确到毫秒级别</p>\n<p>PS: 适合需要进行大量时间范围查询的数据表</p>\n<h3 id=\"3-datetime\"><a href=\"#3-datetime\" class=\"headerlink\" title=\"3.datetime\"></a>3.datetime</h3><p>占用8个字节</p>\n<p>允许为空值，可以自定义值，系统不会自动修改其值</p>\n<p>与时区无关</p>\n<p>不可以设定默认值，所以在不允许为空值的情况下，必须手动指定datetime字段的值才可以成功插入数据</p>\n<p>可以在指定datetime字段的值的时候使用now()变量来自动插入系统的当前时间</p>\n<p>支持范围：1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</p>\n<h3 id=\"总结：-1\"><a href=\"#总结：-1\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>1.性能：bigint性能最高，如果程序有通过时间排序的场景，优势巨大</p>\n<p>2.通用性：bigint不受平台限制，所有系统都能通用，不会对后期的升级迁移造成困扰</p>\n<p>3.精度：bigint能够精确到毫秒级别，对于高并发，高精度查询，帮助大</p>\n<p>4.可读性：bigint不如datetime,开发成本大</p>\n","categories":[{"name":"数据库","path":"api/categories/数据库.json"}],"tags":[{"name":"mysql","path":"api/tags/mysql.json"}]}